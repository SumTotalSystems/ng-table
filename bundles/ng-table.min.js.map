{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ng-table.min.js","webpack:///webpack/bootstrap c8d6c44392eacbf0a5a8","webpack:///external \"angular\"","webpack:///./src/browser/index.ts","webpack:///./src/core/index.ts","webpack:///./src/browser/ngTable.directive.ts","webpack:///./src/browser/ngTableColumn.ts","webpack:///./src/browser/ngTableColumnsBinding.directive.ts","webpack:///./src/browser/ngTableController.ts","webpack:///./src/browser/ngTableDynamic.directive.ts","webpack:///./src/browser/ngTableFilterConfig.ts","webpack:///./src/browser/ngTableFilterRow.directive.ts","webpack:///./src/browser/ngTableFilterRowController.ts","webpack:///./src/browser/ngTableGroupRow.directive.ts","webpack:///./src/browser/ngTableGroupRowController.ts","webpack:///./src/browser/ngTablePagination.directive.ts","webpack:///./src/browser/ngTableSelectFilterDs.directive.ts","webpack:///./src/browser/ngTableSorterRow.directive.ts","webpack:///./src/browser/ngTableSorterRowController.ts","webpack:///./src/core/ngTableDefaultGetData.ts","webpack:///./src/core/ngTableDefaults.ts","webpack:///./src/core/ngTableEventsChannel.ts","webpack:///./src/core/ngTableParams.ts","webpack:///./src/browser/filterRow.html","webpack:///./src/browser/filters/number.html","webpack:///./src/browser/filters/select-multiple.html","webpack:///./src/browser/filters/select.html","webpack:///./src/browser/filters/text.html","webpack:///./src/browser/groupRow.html","webpack:///./src/browser/header.html","webpack:///./src/browser/pager.html","webpack:///./src/browser/sorterRow.html","webpack:///./index.ts"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_0__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","Object","defineProperty","configurable","enumerable","get","n","__esModule","o","object","property","prototype","hasOwnProperty","p","s","_m","args","slice","fn","a","b","apply","concat","__export","angular","ngTable_directive_1","ngTableColumn_1","ngTableColumnsBinding_directive_1","ngTableController_1","ngTableDynamic_directive_1","ngTableFilterConfig_1","ngTableFilterRow_directive_1","ngTableFilterRowController_1","ngTableGroupRow_directive_1","ngTableGroupRowController_1","ngTablePagination_directive_1","ngTableSelectFilterDs_directive_1","ngTableSorterRow_directive_1","ngTableSorterRowController_1","default","directive","ngTable","ngTableColumn","ngTableColumnsBinding","controller","ngTableController","ngTableDynamic","provider","ngTableFilterConfigProvider","ngTableFilterRow","ngTableFilterRowController","ngTableGroupRow","ngTableGroupRowController","ngTablePagination","ngTableSelectFilterDs","ngTableSorterRow","ngTableSorterRowController","ngTableDefaultGetData_1","ngTableDefaults_1","ngTableParams_1","ngTableEventsChannel_1","ngTableDefaultGetDataProvider","ngTableDefaults","ngTableParamsFactory","ngTableEventsChannel","$q","$parse","restrict","priority","scope","compile","element","attr","dataRow","groupRow","columns","rows","ng1","forEach","find","tr","push","filter","hasClass","children","item","el","getAttrValue","setAttrValue","parsedAttribute","expr","localValue","context","undefined","assign","$scope","parsedExpr","$parent","titleExpr","id","title","titleAlt","headerTitle","sortable","class","groupable","headerTemplateURL","filterData","show","length","attrs","$columns","buildColumns","setupBindingsToInternalScope","loadFilterData","compileDirectiveTemplates","$inject","buildColumn","column","defaultScope","extendedCol","create","defaults","createDefaults","prop","isFunction","prop1","getterSetter","arguments","isScopeLike","getterFn","extend","$column","createGetterSetter","noop","initialValue","newValue","$new","linkFn","$element","$attrs","setter","$watch","newColumns","shallowClone","link","NgTableParams","$timeout","$compile","$document","onDataReloadStatusChange","newStatus","params","hasErrorState","currentParams","filterOptions","settings","hasFilterChanges","applyFilter","page","reload","filterDelay","delayFilter","setupFilterRowBindingsToInternalScope","showFilter","show_filter","hasVisibleFilterColumn","disableFilter","$filterRow","disabled","setupGroupRowBindingsToInternalScope","$groupRow","showGroup","showGroupGetter","getVisibleColumns","some","array","predicate","found","obj","commonInit","onAfterReloadData","newDatapage","visibleColumns","hasGroup","$groups","visibleColumnCount","$data","publisher","onPagesChanged","newPages","pages","document","activeElement","focus","$loading","timer","callback","ms","cancel","newParams","oldParams","templates","header","templateHeader","pagination","templatePagination","addClass","headerTemplate","theadFound","e","tagName","prepend","paginationTemplate","after","isPromiseLike","val","then","result","data","isArray","isObject","col","parseNgTableDynamicExpr","indexOf","parts","split","tableParams","Error","tableParamsExpr","tElement","row","showExpr","$watchCollection","newCols","init","resetConfigs","config","defaultConfig","setConfig","customConfig","mergeConfig","aliasUrls","ngTableFilterConfig","getTemplateUrl","filterDef","filterKey","filterName","service","getUrlForAlias","aliasName","defaultBaseUrl","defaultExt","publicConfig","copy","$get","replace","templateUrl","getFilterCellCss","layout","size","keys","width","parseInt","toString","getFilterPlaceholderValue","placeholder","controllerAs","getGroupables","getGroupTitle","groupBy","isSelectedGroup","toggleDetail","setGroup","changeSortDirection","newDirection","$selGroup","group","findGroupColumn","groupKey","isGroupingFunc","groupableCols","groupFns","grouping","existingGroupCol","$selGroupTitle","groupedColumn","groupOptions","isExpanded","pubParams","generatePagesArray","template","append","ngTableSelectFilterDsController","bindDataSource","getSelectListData","hasEmptyOption","unshift","$selectData","isMatch","dataInput","Array","when","sortBy","event","parsedSortable","defaultSort","inverseSort","sorting","sortingParams","ctrlKey","metaKey","parameters","sortDesc","JSON","parse","stringify","resetSortDesc","ngTableDefaultGetData","$filter","getFilterFn","filterFn","filterFilterName","getOrderByFn","sortingFilterName","hasFilter","filterKeys","parsedFilter","reduce","key","setPath","filterComparator","applyPaging","pagedData","count","total","applySort","orderBy","orderByFn","getData","options","defaultDataOptions","dataOptions","fData","orderedData","path","ret","lastKey","target","parentPathKeys","$rootScope","addTableParamsEvent","eventName","fnName","charAt","toUpperCase","substring","_a","createEventSubscriptionFn","createPublishEventFn","createEventSelectorFn","eventSelector","isEventSelectorFunc","handler","eventSelectorOrScope","actualEvtSelector","$on","eventArgs","_i","isNullInstance","fnArgs","$broadcast","events","$log","baseParameters","baseSettings","isNumber","isNaN","parseFloat","isFinite","parseGroup","_settings","isGroupingFun","sortDirection","convertSortToOrderBy","createComparableParams","_params","groupSortDirection","hasGlobalSearchFieldChanges","currentVal","previousVal","prevParamsMemento","equals","optimizeFilterDelay","defaultFilterOptions","filterDelayThreshold","defaultSettingsFns","runInterceptorPipeline","fetchedData","interceptors","interceptor","thenFn","response","bind","rejectFn","responseError","reject","self","reason","getDefaultSettingFns","dataset","getGroups","groupFn","groupField","getPath","originalDataOptions","gotData","groups","groupName","$hideRows","finally","ks","currentPage","focusElement","errParamsMemento","isCommittedDataset","initialEvents","log","debugMode","debug","filterLayout","defaultGroupOptions","newParameters","parseParamsFromUrl","reverse","len","v","newSettings","isDefined","originalDataset","hasDatasetChanged","fireEvent","publishDatasetChanged","setAccessibilityOptions","translations","accessibilityOptions","pageFocus","field","significantFilter","filterValue","direction","isSortBy","totalItems","pageSize","maxBlocks","maxPage","maxPivotPages","minPage","numPages","Math","ceil","type","number","max","active","current","round","paginationMaxBlocks","paginationMinBlocks","min","isDataReloadRequired","previousFilter","url","asString","collectValue","pairs","encodeURIComponent","isSignificantValue","subkey","pname","pData","oldData","publishAfterReloadData","reloadPages","catch","currentPages","oldPages","publishPagesChanged","pagerTitle","more","next","prev","pageNumPrefix","counts","sortingIndicator","publishAfterCreated","html","run","put","core_1","browser_1"],"mappings":"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","file":"ng-table.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng-table\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ng-table\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng-table\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ng-table\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmory imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmory exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tObject.defineProperty(exports, name, {\n/******/ \t\t\tconfigurable: false,\n/******/ \t\t\tenumerable: true,\n/******/ \t\t\tget: getter\n/******/ \t\t});\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 33);\n/******/ })\n/************************************************************************/\n/******/ ((function(modules) {\n\t// Check all modules for deduplicated modules\n\tfor(var i in modules) {\n\t\tif(Object.prototype.hasOwnProperty.call(modules, i)) {\n\t\t\tswitch(typeof modules[i]) {\n\t\t\tcase \"function\": break;\n\t\t\tcase \"object\":\n\t\t\t\t// Module can be created from a template\n\t\t\t\tmodules[i] = (function(_m) {\n\t\t\t\t\tvar args = _m.slice(1), fn = modules[_m[0]];\n\t\t\t\t\treturn function (a,b,c) {\n\t\t\t\t\t\tfn.apply(this, [a,b,c].concat(args));\n\t\t\t\t\t};\n\t\t\t\t}(modules[i]));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Module is a copy of another module\n\t\t\t\tmodules[i] = modules[modules[i]];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn modules;\n}([\n/* 0 */\n/***/ function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nvar angular = __webpack_require__(0);\r\nvar ngTable_directive_1 = __webpack_require__(4);\r\nvar ngTableColumn_1 = __webpack_require__(5);\r\nvar ngTableColumnsBinding_directive_1 = __webpack_require__(6);\r\nvar ngTableController_1 = __webpack_require__(7);\r\nvar ngTableDynamic_directive_1 = __webpack_require__(8);\r\nvar ngTableFilterConfig_1 = __webpack_require__(9);\r\nvar ngTableFilterRow_directive_1 = __webpack_require__(10);\r\nvar ngTableFilterRowController_1 = __webpack_require__(11);\r\nvar ngTableGroupRow_directive_1 = __webpack_require__(12);\r\nvar ngTableGroupRowController_1 = __webpack_require__(13);\r\nvar ngTablePagination_directive_1 = __webpack_require__(14);\r\nvar ngTableSelectFilterDs_directive_1 = __webpack_require__(15);\r\nvar ngTableSorterRow_directive_1 = __webpack_require__(16);\r\nvar ngTableSorterRowController_1 = __webpack_require__(17);\r\n__webpack_require__(25);\r\n__webpack_require__(27);\r\n__webpack_require__(26);\r\n__webpack_require__(28);\r\n__webpack_require__(31);\r\n__webpack_require__(30);\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = angular.module('ngTable-browser', [])\r\n    .directive('ngTable', ngTable_directive_1.ngTable)\r\n    .factory('ngTableColumn', ngTableColumn_1.ngTableColumn)\r\n    .directive('ngTableColumnsBinding', ngTableColumnsBinding_directive_1.ngTableColumnsBinding)\r\n    .controller('ngTableController', ngTableController_1.ngTableController)\r\n    .directive('ngTableDynamic', ngTableDynamic_directive_1.ngTableDynamic)\r\n    .provider('ngTableFilterConfig', ngTableFilterConfig_1.ngTableFilterConfigProvider)\r\n    .directive('ngTableFilterRow', ngTableFilterRow_directive_1.ngTableFilterRow)\r\n    .controller('ngTableFilterRowController', ngTableFilterRowController_1.ngTableFilterRowController)\r\n    .directive('ngTableGroupRow', ngTableGroupRow_directive_1.ngTableGroupRow)\r\n    .controller('ngTableGroupRowController', ngTableGroupRowController_1.ngTableGroupRowController)\r\n    .directive('ngTablePagination', ngTablePagination_directive_1.ngTablePagination)\r\n    .directive('ngTableSelectFilterDs', ngTableSelectFilterDs_directive_1.ngTableSelectFilterDs)\r\n    .directive('ngTableSorterRow', ngTableSorterRow_directive_1.ngTableSorterRow)\r\n    .controller('ngTableSorterRowController', ngTableSorterRowController_1.ngTableSorterRowController);\r\n__export(__webpack_require__(18));\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nvar angular = __webpack_require__(0);\r\nvar ngTableDefaultGetData_1 = __webpack_require__(19);\r\nvar ngTableDefaults_1 = __webpack_require__(20);\r\nvar ngTableParams_1 = __webpack_require__(22);\r\nvar ngTableEventsChannel_1 = __webpack_require__(21);\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = angular.module('ngTable-core', [])\r\n    .provider('ngTableDefaultGetData', ngTableDefaultGetData_1.ngTableDefaultGetDataProvider)\r\n    .value('ngTableDefaults', ngTableDefaults_1.ngTableDefaults)\r\n    .factory('NgTableParams', ngTableParams_1.ngTableParamsFactory)\r\n    .factory('ngTableEventsChannel', ngTableEventsChannel_1.ngTableEventsChannel);\r\n__export(__webpack_require__(23));\r\n\n\n/***/ },\n/* 3 */,\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\r\nvar ng1 = __webpack_require__(0);\r\nngTable.$inject = ['$q', '$parse'];\r\n/**\r\n * Directive that instantiates {@link ngTableController ngTableController}.\r\n * @ngdoc directive\r\n * @name ngTable\r\n * @example\r\n *\r\n * ```html\r\n * <table ng-table=\"$ctrl.tableParams\" show-filter=\"true\" class=\"table table-bordered\">\r\n *  <tr ng-repeat=\"user in $data\">\r\n *      <td data-title=\"'Name'\" sortable=\"'name'\" filter=\"{ 'name': 'text' }\">\r\n *          {{user.name}}\r\n *      </td>\r\n *      <td data-title=\"'Age'\" sortable=\"'age'\" filter=\"{ 'age': 'text' }\">\r\n *          {{user.age}}\r\n *      </td>\r\n *  </tr>\r\n * </table>\r\n * ```\r\n */\r\nfunction ngTable($q, $parse) {\r\n    return {\r\n        restrict: 'A',\r\n        priority: 1001,\r\n        scope: true,\r\n        controller: 'ngTableController',\r\n        compile: function (element) {\r\n            element.attr('tabindex', '-1');\r\n            var columns = [], i = 0, dataRow, groupRow, rows = [];\r\n            ng1.forEach(element.find('tr'), function (tr) {\r\n                rows.push(ng1.element(tr));\r\n            });\r\n            dataRow = rows.filter(function (tr) {\r\n                return !tr.hasClass('ng-table-group');\r\n            })[0];\r\n            groupRow = rows.filter(function (tr) {\r\n                return tr.hasClass('ng-table-group');\r\n            })[0];\r\n            if (!dataRow) {\r\n                return undefined;\r\n            }\r\n            // Accessibility: row.children() caters for both <td> and <th> in rows of <tbody>\r\n            ng1.forEach(dataRow.children(), function (item) {\r\n                var el = ng1.element(item);\r\n                if (el.attr('ignore-cell') && 'true' === el.attr('ignore-cell')) {\r\n                    return;\r\n                }\r\n                var getAttrValue = function (attr) {\r\n                    return el.attr('x-data-' + attr) || el.attr('data-' + attr) || el.attr(attr);\r\n                };\r\n                var setAttrValue = function (attr, value) {\r\n                    if (el.attr('x-data-' + attr)) {\r\n                        el.attr('x-data-' + attr, value);\r\n                    }\r\n                    else if (el.attr('data' + attr)) {\r\n                        el.attr('data' + attr, value);\r\n                    }\r\n                    else {\r\n                        el.attr(attr, value);\r\n                    }\r\n                };\r\n                var parsedAttribute = function (attr) {\r\n                    var expr = getAttrValue(attr);\r\n                    if (!expr) {\r\n                        return undefined;\r\n                    }\r\n                    var localValue;\r\n                    var getter = function (context) {\r\n                        if (localValue !== undefined) {\r\n                            return localValue;\r\n                        }\r\n                        return $parse(expr)(context);\r\n                    };\r\n                    getter.assign = function ($scope, value) {\r\n                        var parsedExpr = $parse(expr);\r\n                        if (parsedExpr.assign) {\r\n                            // we should be writing back to the parent scope as this is where the expression\r\n                            // came from\r\n                            parsedExpr.assign($scope.$parent, value);\r\n                        }\r\n                        else {\r\n                            localValue = value;\r\n                        }\r\n                    };\r\n                    return getter;\r\n                };\r\n                var titleExpr = getAttrValue('title-alt') || getAttrValue('title');\r\n                if (titleExpr) {\r\n                    el.attr('data-title-text', '{{' + titleExpr + '}}'); // this used in responsive table\r\n                }\r\n                // NOTE TO MAINTAINERS: if you add extra fields to a $column be sure to extend ngTableColumn with\r\n                // a corresponding \"safe\" default\r\n                columns.push({\r\n                    id: i++,\r\n                    title: parsedAttribute('title'),\r\n                    titleAlt: parsedAttribute('title-alt'),\r\n                    headerTitle: parsedAttribute('header-title'),\r\n                    sortable: parsedAttribute('sortable'),\r\n                    'class': parsedAttribute('header-class'),\r\n                    filter: parsedAttribute('filter'),\r\n                    groupable: parsedAttribute('groupable'),\r\n                    headerTemplateURL: parsedAttribute('header'),\r\n                    filterData: parsedAttribute('filter-data'),\r\n                    show: el.attr(\"ng-if\") ? parsedAttribute('ng-if') : undefined\r\n                });\r\n                if (groupRow || el.attr(\"ng-if\")) {\r\n                    // change ng-if to bind to our column definition which we know will be writable\r\n                    // because this will potentially increase the $watch count, only do so if we already have an\r\n                    // ng-if or when we definitely need to change visibility of the columns.\r\n                    // currently only ngTableGroupRow directive needs to change visibility\r\n                    setAttrValue('ng-if', '$columns[' + (columns.length - 1) + '].show(this)');\r\n                }\r\n            });\r\n            return function (scope, element, attrs, controller) {\r\n                scope.$columns = columns = controller.buildColumns(columns);\r\n                controller.setupBindingsToInternalScope(attrs.ngTable);\r\n                controller.loadFilterData(columns);\r\n                controller.compileDirectiveTemplates();\r\n            };\r\n        }\r\n    };\r\n}\r\nexports.ngTable = ngTable;\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar ng1 = __webpack_require__(0);\r\nngTableColumn.$inject = [];\r\n/**\r\n * @private\r\n * Service to construct a $column definition used by {@link ngTable ngTable} directive\r\n */\r\nfunction ngTableColumn() {\r\n    return {\r\n        buildColumn: buildColumn\r\n    };\r\n    //////////////\r\n    function buildColumn(column, defaultScope, columns) {\r\n        // note: we're not modifying the original column object. This helps to avoid unintended side affects\r\n        var extendedCol = Object.create(column);\r\n        var defaults = createDefaults();\r\n        for (var prop in defaults) {\r\n            if (extendedCol[prop] === undefined) {\r\n                extendedCol[prop] = defaults[prop];\r\n            }\r\n            if (!ng1.isFunction(extendedCol[prop])) {\r\n                // wrap raw field values with \"getter\" functions\r\n                // - this is to ensure consistency with how ngTable.compile builds columns\r\n                // - note that the original column object is being \"proxied\"; this is important\r\n                //   as it ensure that any changes to the original object will be returned by the \"getter\"\r\n                (function (prop1) {\r\n                    var getterSetter = function getterSetter() {\r\n                        if (arguments.length === 1 && !isScopeLike(arguments[0])) {\r\n                            getterSetter.assign(null, arguments[0]);\r\n                        }\r\n                        else {\r\n                            return column[prop1];\r\n                        }\r\n                    };\r\n                    getterSetter.assign = function ($scope, value) {\r\n                        column[prop1] = value;\r\n                    };\r\n                    extendedCol[prop1] = getterSetter;\r\n                })(prop);\r\n            }\r\n            (function (prop1) {\r\n                // satisfy the arguments expected by the function returned by parsedAttribute in the ngTable directive\r\n                var getterFn = extendedCol[prop1];\r\n                extendedCol[prop1] = function () {\r\n                    if (arguments.length === 1 && !isScopeLike(arguments[0])) {\r\n                        getterFn.assign(null, arguments[0]);\r\n                    }\r\n                    else {\r\n                        var scope = arguments[0] || defaultScope;\r\n                        var context = Object.create(scope);\r\n                        ng1.extend(context, {\r\n                            $column: extendedCol,\r\n                            $columns: columns\r\n                        });\r\n                        return getterFn.call(column, context);\r\n                    }\r\n                };\r\n                if (getterFn.assign) {\r\n                    extendedCol[prop1].assign = getterFn.assign;\r\n                }\r\n            })(prop);\r\n        }\r\n        return extendedCol;\r\n    }\r\n    function createDefaults() {\r\n        return {\r\n            'class': createGetterSetter(''),\r\n            filter: createGetterSetter(false),\r\n            groupable: createGetterSetter(false),\r\n            filterData: ng1.noop,\r\n            headerTemplateURL: createGetterSetter(false),\r\n            headerTitle: createGetterSetter(''),\r\n            sortable: createGetterSetter(false),\r\n            show: createGetterSetter(true),\r\n            title: createGetterSetter(''),\r\n            titleAlt: createGetterSetter('')\r\n        };\r\n    }\r\n    function createGetterSetter(initialValue) {\r\n        var value = initialValue;\r\n        var getterSetter = function getterSetter() {\r\n            if (arguments.length === 1 && !isScopeLike(arguments[0])) {\r\n                getterSetter.assign(null, arguments[0]);\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        };\r\n        getterSetter.assign = function ($scope, newValue) {\r\n            value = newValue;\r\n        };\r\n        return getterSetter;\r\n    }\r\n    function isScopeLike(object) {\r\n        return object != null && ng1.isFunction(object.$new);\r\n    }\r\n}\r\nexports.ngTableColumn = ngTableColumn;\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nngTableColumnsBinding.$inject = [\"$parse\"];\r\n/**\r\n * One-way data binds the $columns array generated by ngTable/ngTableDynamic to the specified\r\n * expression.\r\n * This allows the $columns array created for the table to be accessed outside of the html table\r\n * markup.\r\n *\r\n * @ngdoc directive\r\n *\r\n * @example\r\n * ```html\r\n * <table ng-table=\"$ctrl.tableParams\" class=\"table\" ng-table-columns-binding=\"$ctlr.tableColumns\">\r\n * ```\r\n */\r\nfunction ngTableColumnsBinding($parse) {\r\n    var directive = {\r\n        restrict: 'A',\r\n        require: 'ngTable',\r\n        link: linkFn\r\n    };\r\n    return directive;\r\n    function linkFn($scope, $element, $attrs) {\r\n        var setter = $parse($attrs.ngTableColumnsBinding).assign;\r\n        if (setter) {\r\n            $scope.$watch('$columns', function (newColumns) {\r\n                var shallowClone = (newColumns || []).slice(0);\r\n                setter($scope, shallowClone);\r\n            });\r\n        }\r\n    }\r\n}\r\nexports.ngTableColumnsBinding = ngTableColumnsBinding;\r\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar ng1 = __webpack_require__(0);\r\nngTableController.$inject = [\r\n    '$scope', 'NgTableParams', '$timeout', '$parse', '$compile', '$attrs', '$element', '$document', 'ngTableColumn', 'ngTableEventsChannel'\r\n];\r\n/**\r\n * The controller for the {@link ngTable ngTable} and {@link ngTableDynamic ngTableDynamic} directives\r\n */\r\nfunction ngTableController($scope, NgTableParams, $timeout, $parse, $compile, $attrs, $element, $document, ngTableColumn, ngTableEventsChannel) {\r\n    var isFirstTimeLoad = true;\r\n    $scope.$filterRow = { disabled: false };\r\n    $scope.$loading = false;\r\n    // until such times as the directive uses an isolated scope, we need to ensure that the check for\r\n    // the params field only consults the \"own properties\" of the $scope. This is to avoid seeing the params\r\n    // field on a $scope higher up in the prototype chain\r\n    if (!$scope.hasOwnProperty(\"params\")) {\r\n        $scope.params = new NgTableParams(true);\r\n    }\r\n    var delayFilter = (function () {\r\n        var timer;\r\n        return function (callback, ms) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(callback, ms);\r\n        };\r\n    })();\r\n    function onDataReloadStatusChange(newStatus /*, oldStatus*/) {\r\n        if (!newStatus || $scope.params.hasErrorState()) {\r\n            return;\r\n        }\r\n        var currentParams = $scope.params;\r\n        var filterOptions = currentParams.settings().filterOptions;\r\n        if (currentParams.hasFilterChanges()) {\r\n            var applyFilter = function () {\r\n                currentParams.page(1);\r\n                currentParams.reload();\r\n            };\r\n            if (filterOptions.filterDelay) {\r\n                delayFilter(applyFilter, filterOptions.filterDelay);\r\n            }\r\n            else {\r\n                applyFilter();\r\n            }\r\n        }\r\n        else {\r\n            currentParams.reload();\r\n        }\r\n    }\r\n    // watch for when a new NgTableParams is bound to the scope\r\n    // CRITICAL: the watch must be for reference and NOT value equality; this is because NgTableParams maintains\r\n    // the current data page as a field. Checking this for value equality would be terrible for performance\r\n    // and potentially cause an error if the items in that array has circular references\r\n    $scope.$watch('params', function (newParams, oldParams) {\r\n        if (newParams === oldParams || !newParams) {\r\n            return;\r\n        }\r\n        newParams.reload();\r\n    }, false);\r\n    $scope.$watch('params.isDataReloadRequired()', onDataReloadStatusChange);\r\n    this.compileDirectiveTemplates = function () {\r\n        if (!$element.hasClass('ng-table')) {\r\n            $scope.templates = {\r\n                header: ($attrs.templateHeader ? $attrs.templateHeader : 'ng-table/header.html'),\r\n                pagination: ($attrs.templatePagination ? $attrs.templatePagination : 'ng-table/pager.html')\r\n            };\r\n            $element.addClass('ng-table');\r\n            var headerTemplate = null;\r\n            // $element.find('> thead').length === 0 doesn't work on jqlite\r\n            var theadFound = false;\r\n            ng1.forEach($element.children(), function (e) {\r\n                if (e.tagName === 'THEAD') {\r\n                    theadFound = true;\r\n                }\r\n            });\r\n            if (!theadFound) {\r\n                headerTemplate = ng1.element('<thead ng-include=\"templates.header\"></thead>', $document);\r\n                $element.prepend(headerTemplate);\r\n            }\r\n            var paginationTemplate = ng1.element('<div ng-table-pagination=\"params\" template-url=\"templates.pagination\"></div>', $document);\r\n            $element.after(paginationTemplate);\r\n            if (headerTemplate) {\r\n                $compile(headerTemplate)($scope);\r\n            }\r\n            $compile(paginationTemplate)($scope);\r\n        }\r\n    };\r\n    this.loadFilterData = function ($columns) {\r\n        ng1.forEach($columns, function ($column) {\r\n            var result = $column.filterData($scope);\r\n            if (!result) {\r\n                delete $column.filterData;\r\n                return undefined;\r\n            }\r\n            if (isPromiseLike(result)) {\r\n                delete $column.filterData;\r\n                return result.then(function (data) {\r\n                    // our deferred can eventually return arrays, functions and objects\r\n                    if (!ng1.isArray(data) && !ng1.isFunction(data) && !ng1.isObject(data)) {\r\n                        // if none of the above was found - we just want an empty array\r\n                        data = [];\r\n                    }\r\n                    $column.data = data;\r\n                });\r\n            }\r\n            else {\r\n                return $column.data = result;\r\n            }\r\n        });\r\n        function isPromiseLike(val) {\r\n            return val && typeof val === 'object' && typeof val.then === 'function';\r\n        }\r\n    };\r\n    this.buildColumns = function (columns) {\r\n        var result = [];\r\n        (columns || []).forEach(function (col) {\r\n            result.push(ngTableColumn.buildColumn(col, $scope, result));\r\n        });\r\n        return result;\r\n    };\r\n    this.parseNgTableDynamicExpr = function (attr) {\r\n        if (!attr || attr.indexOf(\" with \") > -1) {\r\n            var parts = attr.split(/\\s+with\\s+/);\r\n            return {\r\n                tableParams: parts[0],\r\n                columns: parts[1]\r\n            };\r\n        }\r\n        else {\r\n            throw new Error('Parse error (expected example: ng-table-dynamic=\\'tableParams with cols\\')');\r\n        }\r\n    };\r\n    this.setupBindingsToInternalScope = function (tableParamsExpr) {\r\n        // note: this we're setting up watches to simulate angular's isolated scope bindings\r\n        // note: is REALLY important to watch for a change to the ngTableParams *reference* rather than\r\n        // $watch for value equivalence. This is because ngTableParams references the current page of data as\r\n        // a field and it's important not to watch this\r\n        $scope.$watch(tableParamsExpr, function (params) {\r\n            if (params === undefined) {\r\n                return;\r\n            }\r\n            $scope.params = params;\r\n        }, false);\r\n        setupFilterRowBindingsToInternalScope();\r\n        setupGroupRowBindingsToInternalScope();\r\n    };\r\n    function setupFilterRowBindingsToInternalScope() {\r\n        if ($attrs.showFilter) {\r\n            $scope.$parent.$watch($attrs.showFilter, function (value) {\r\n                $scope.show_filter = value;\r\n            });\r\n        }\r\n        else {\r\n            $scope.$watch(hasVisibleFilterColumn, function (value) {\r\n                $scope.show_filter = value;\r\n            });\r\n        }\r\n        if ($attrs.disableFilter) {\r\n            $scope.$parent.$watch($attrs.disableFilter, function (value) {\r\n                $scope.$filterRow.disabled = value;\r\n            });\r\n        }\r\n    }\r\n    function setupGroupRowBindingsToInternalScope() {\r\n        $scope.$groupRow = { show: false };\r\n        if ($attrs.showGroup) {\r\n            var showGroupGetter = $parse($attrs.showGroup);\r\n            $scope.$parent.$watch(showGroupGetter, function (value) {\r\n                $scope.$groupRow.show = value;\r\n            });\r\n            if (showGroupGetter.assign) {\r\n                // setup two-way databinding thus allowing ngTableGrowRow to assign to the showGroup expression\r\n                $scope.$watch('$groupRow.show', function (value) {\r\n                    showGroupGetter.assign($scope.$parent, value);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            $scope.$watch('params.hasGroup()', function (newValue) {\r\n                $scope.$groupRow.show = newValue;\r\n            });\r\n        }\r\n    }\r\n    function getVisibleColumns() {\r\n        return ($scope.$columns || []).filter(function (c) {\r\n            return c.show($scope);\r\n        });\r\n    }\r\n    function hasVisibleFilterColumn() {\r\n        if (!$scope.$columns)\r\n            return false;\r\n        return some($scope.$columns, function ($column) {\r\n            return $column.show($scope) && !!$column.filter($scope);\r\n        });\r\n    }\r\n    function some(array, predicate) {\r\n        var found = false;\r\n        for (var i = 0; i < array.length; i++) {\r\n            var obj = array[i];\r\n            if (predicate(obj)) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n    function commonInit() {\r\n        ngTableEventsChannel.onAfterReloadData(function (params, newDatapage) {\r\n            var visibleColumns = getVisibleColumns();\r\n            if (params.hasGroup()) {\r\n                $scope.$groups = (newDatapage || []);\r\n                $scope.$groups.visibleColumnCount = visibleColumns.length;\r\n            }\r\n            else {\r\n                $scope.$data = (newDatapage || []);\r\n                $scope.$data.visibleColumnCount = visibleColumns.length;\r\n            }\r\n        }, $scope, function (publisher) { return $scope.params === publisher; });\r\n        ngTableEventsChannel.onPagesChanged(function (params, newPages) {\r\n            $scope.pages = newPages;\r\n            $timeout(function () {\r\n                if (document.activeElement === null) {\r\n                    $element[0].focus();\r\n                }\r\n            });\r\n        }, $scope, function (publisher) { return $scope.params === publisher; });\r\n    }\r\n    commonInit();\r\n}\r\nexports.ngTableController = ngTableController;\r\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar ng1 = __webpack_require__(0);\r\nngTableDynamic.$inject = [];\r\n/**\r\n * A dynamic version of the {@link ngTable ngTable} directive that accepts a dynamic list of columns\r\n * definitions to render\r\n * @ngdoc directive\r\n *\r\n * @example\r\n * ```html\r\n * <table ng-table-dynamic=\"$ctrl.tableParams with $ctrl.cols\" class=\"table\">\r\n *  <tr ng-repeat=\"row in $data\">\r\n *    <td ng-repeat=\"col in $columns\">{{row[col.field]}}</td>\r\n *  </tr>\r\n * </table>\r\n * ```\r\n */\r\nfunction ngTableDynamic() {\r\n    return {\r\n        restrict: 'A',\r\n        priority: 1001,\r\n        scope: true,\r\n        controller: 'ngTableController',\r\n        compile: function (tElement) {\r\n            var row;\r\n            // IE 8 fix :not(.ng-table-group) selector\r\n            ng1.forEach(tElement.find('tr'), function (tr) {\r\n                tr = ng1.element(tr);\r\n                if (!tr.hasClass('ng-table-group') && !row) {\r\n                    row = tr;\r\n                }\r\n            });\r\n            if (!row) {\r\n                return undefined;\r\n            }\r\n            ng1.forEach(row.find('td'), function (item) {\r\n                var el = ng1.element(item);\r\n                var getAttrValue = function (attr) {\r\n                    return el.attr('x-data-' + attr) || el.attr('data-' + attr) || el.attr(attr);\r\n                };\r\n                // this used in responsive table\r\n                var titleExpr = getAttrValue('title');\r\n                if (!titleExpr) {\r\n                    el.attr('data-title-text', '{{$columns[$index].titleAlt(this) || $columns[$index].title(this)}}');\r\n                }\r\n                var showExpr = el.attr('ng-if');\r\n                if (!showExpr) {\r\n                    el.attr('ng-if', '$columns[$index].show(this)');\r\n                }\r\n            });\r\n            return function (scope, element, attrs, controller) {\r\n                var expr = controller.parseNgTableDynamicExpr(attrs.ngTableDynamic);\r\n                controller.setupBindingsToInternalScope(expr.tableParams);\r\n                controller.compileDirectiveTemplates();\r\n                scope.$watchCollection(expr.columns, function (newCols /*, oldCols*/) {\r\n                    scope.$columns = controller.buildColumns(newCols);\r\n                    controller.loadFilterData(scope.$columns);\r\n                });\r\n            };\r\n        }\r\n    };\r\n}\r\nexports.ngTableDynamic = ngTableDynamic;\r\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar ng1 = __webpack_require__(0);\r\nngTableFilterConfigProvider.$inject = [];\r\n/**\r\n * The angular provider used to configure the behaviour of the `ngTableFilterConfig` service.\r\n *\r\n * Implements the {@link IFilterConfigProvider IFilterConfigProvider} interface\r\n */\r\nfunction ngTableFilterConfigProvider() {\r\n    var config;\r\n    var defaultConfig = {\r\n        defaultBaseUrl: 'ng-table/filters/',\r\n        defaultExt: '.html',\r\n        aliasUrls: {}\r\n    };\r\n    this.$get = ngTableFilterConfig;\r\n    this.resetConfigs = resetConfigs;\r\n    this.setConfig = setConfig;\r\n    init();\r\n    /////////\r\n    function init() {\r\n        resetConfigs();\r\n    }\r\n    function resetConfigs() {\r\n        config = defaultConfig;\r\n    }\r\n    function setConfig(customConfig) {\r\n        var mergeConfig = ng1.extend({}, config, customConfig);\r\n        mergeConfig.aliasUrls = ng1.extend({}, config.aliasUrls, customConfig.aliasUrls);\r\n        config = mergeConfig;\r\n    }\r\n    /////////\r\n    ngTableFilterConfig.$inject = [];\r\n    function ngTableFilterConfig() {\r\n        var publicConfig;\r\n        var service = {\r\n            config: publicConfig,\r\n            getTemplateUrl: getTemplateUrl,\r\n            getUrlForAlias: getUrlForAlias\r\n        };\r\n        Object.defineProperty(service, \"config\", {\r\n            get: function () {\r\n                return publicConfig = publicConfig || ng1.copy(config);\r\n            },\r\n            enumerable: true\r\n        });\r\n        return service;\r\n        /////////\r\n        function getTemplateUrl(filterDef, filterKey) {\r\n            var filterName;\r\n            if (typeof filterDef !== 'string') {\r\n                filterName = filterDef.id;\r\n            }\r\n            else {\r\n                filterName = filterDef;\r\n            }\r\n            if (filterName.indexOf('/') !== -1) {\r\n                return filterName;\r\n            }\r\n            return service.getUrlForAlias(filterName, filterKey);\r\n        }\r\n        function getUrlForAlias(aliasName, filterKey) {\r\n            return config.aliasUrls[aliasName] || config.defaultBaseUrl + aliasName + config.defaultExt;\r\n        }\r\n    }\r\n}\r\nexports.ngTableFilterConfigProvider = ngTableFilterConfigProvider;\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar templateUrl = __webpack_require__(24);\r\nngTableFilterRow.$inject = [];\r\n/**\r\n * directive that renders the filter header row for a table\r\n * @ngdoc directive\r\n * @example\r\n * ```html\r\n * <ng-table-filter-row></ng-table-filter-row>\r\n * ```\r\n */\r\nfunction ngTableFilterRow() {\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: templateUrl,\r\n        scope: true,\r\n        controller: 'ngTableFilterRowController'\r\n    };\r\n    return directive;\r\n}\r\nexports.ngTableFilterRow = ngTableFilterRow;\r\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nngTableFilterRowController.$inject = ['$scope', 'ngTableFilterConfig'];\r\n/**\r\n * Controller for the {@link ngTableFilterRow ngTableFilterRow} directive\r\n */\r\nfunction ngTableFilterRowController($scope, ngTableFilterConfig) {\r\n    $scope.config = ngTableFilterConfig;\r\n    $scope.getFilterCellCss = function (filter, layout) {\r\n        if (layout !== 'horizontal') {\r\n            return 's12';\r\n        }\r\n        var size = Object.keys(filter).length;\r\n        var width = parseInt((12 / size).toString(), 10);\r\n        return 's' + width;\r\n    };\r\n    $scope.getFilterPlaceholderValue = function (filterDef, filterKey) {\r\n        if (typeof filterDef === 'string') {\r\n            return '';\r\n        }\r\n        else {\r\n            return filterDef.placeholder;\r\n        }\r\n    };\r\n}\r\nexports.ngTableFilterRowController = ngTableFilterRowController;\r\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar templateUrl = __webpack_require__(29);\r\nngTableGroupRow.$inject = [];\r\n/**\r\n * directive that renders the group header row for a table\r\n * @ngdoc directive\r\n * @example\r\n * ```html\r\n * <ng-table-group-row></ng-table-group-row>\r\n * ```\r\n */\r\nfunction ngTableGroupRow() {\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: templateUrl,\r\n        scope: true,\r\n        controller: 'ngTableGroupRowController',\r\n        controllerAs: 'dctrl'\r\n    };\r\n    return directive;\r\n}\r\nexports.ngTableGroupRow = ngTableGroupRow;\r\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nngTableGroupRowController.$inject = ['$scope'];\r\n/**\r\n * Controller for the {@link ngTableGroupRow ngTableGroupRow} directive\r\n */\r\nfunction ngTableGroupRowController($scope) {\r\n    var groupFns = [];\r\n    init();\r\n    function init() {\r\n        $scope.getGroupables = getGroupables;\r\n        $scope.getGroupTitle = getGroupTitle;\r\n        $scope.getVisibleColumns = getVisibleColumns;\r\n        $scope.groupBy = groupBy;\r\n        $scope.isSelectedGroup = isSelectedGroup;\r\n        $scope.toggleDetail = toggleDetail;\r\n        $scope.$watch('params.group()', setGroup, true);\r\n    }\r\n    function changeSortDirection() {\r\n        var newDirection;\r\n        if ($scope.params.hasGroup($scope.$selGroup, 'asc')) {\r\n            newDirection = 'desc';\r\n        }\r\n        else if ($scope.params.hasGroup($scope.$selGroup, 'desc')) {\r\n            newDirection = '';\r\n        }\r\n        else {\r\n            newDirection = 'asc';\r\n        }\r\n        $scope.params.group($scope.$selGroup, newDirection);\r\n    }\r\n    function findGroupColumn(groupKey) {\r\n        return $scope.$columns.filter(function ($column) {\r\n            return $column.groupable($scope) === groupKey;\r\n        })[0];\r\n    }\r\n    function getGroupTitle(group) {\r\n        return isGroupingFunc(group) ? group.title : group.title($scope);\r\n    }\r\n    function getGroupables() {\r\n        var groupableCols = $scope.$columns.filter(function ($column) {\r\n            return !!$column.groupable($scope);\r\n        });\r\n        return groupFns.concat(groupableCols);\r\n    }\r\n    function getVisibleColumns() {\r\n        return $scope.$columns.filter(function ($column) {\r\n            return $column.show($scope);\r\n        });\r\n    }\r\n    function groupBy(group) {\r\n        if (isSelectedGroup(group)) {\r\n            changeSortDirection();\r\n        }\r\n        else {\r\n            if (isGroupingFunc(group)) {\r\n                $scope.params.group(group);\r\n            }\r\n            else {\r\n                // it's OK, we know that groupable will return a string\r\n                // this is guaranteed by getGroupables returning only\r\n                // columns that return (truthy) strings\r\n                $scope.params.group(group.groupable($scope));\r\n            }\r\n        }\r\n    }\r\n    function isGroupingFunc(val) {\r\n        return typeof val === 'function';\r\n    }\r\n    function isSelectedGroup(group) {\r\n        if (isGroupingFunc(group)) {\r\n            return group === $scope.$selGroup;\r\n        }\r\n        else {\r\n            return group.groupable($scope) === $scope.$selGroup;\r\n        }\r\n    }\r\n    function setGroup(grouping) {\r\n        var existingGroupCol = findGroupColumn($scope.$selGroup);\r\n        if (existingGroupCol && existingGroupCol.show.assign) {\r\n            existingGroupCol.show.assign($scope, true);\r\n        }\r\n        if (isGroupingFunc(grouping)) {\r\n            groupFns = [grouping];\r\n            $scope.$selGroup = grouping;\r\n            $scope.$selGroupTitle = grouping.title;\r\n        }\r\n        else {\r\n            // note: currently only one group is implemented\r\n            var groupKey = Object.keys(grouping || {})[0];\r\n            var groupedColumn = findGroupColumn(groupKey);\r\n            if (groupedColumn) {\r\n                $scope.$selGroupTitle = groupedColumn.title($scope);\r\n                $scope.$selGroup = groupKey;\r\n                if (groupedColumn.show.assign) {\r\n                    groupedColumn.show.assign($scope, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function toggleDetail() {\r\n        $scope.params.settings().groupOptions.isExpanded = !$scope.params.settings().groupOptions.isExpanded;\r\n        return $scope.params.reload();\r\n    }\r\n}\r\nexports.ngTableGroupRowController = ngTableGroupRowController;\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar ng1 = __webpack_require__(0);\r\nngTablePagination.$inject = ['$compile', '$document', 'ngTableEventsChannel'];\r\n/**\r\n * Directive that renders the table pagination controls\r\n * @ngdoc directive\r\n */\r\nfunction ngTablePagination($compile, $document, ngTableEventsChannel) {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            'params': '=ngTablePagination',\r\n            'templateUrl': '='\r\n        },\r\n        replace: false,\r\n        link: function (scope, element /*, attrs*/) {\r\n            ngTableEventsChannel.onAfterReloadData(function (pubParams) {\r\n                scope.pages = pubParams.generatePagesArray();\r\n            }, scope, function (pubParams) {\r\n                return pubParams === scope.params;\r\n            });\r\n            scope.$watch('templateUrl', function (templateUrl) {\r\n                if (templateUrl === undefined) {\r\n                    return;\r\n                }\r\n                var template = ng1.element('<div ng-include=\"templateUrl\"></div>', $document);\r\n                element.append(template);\r\n                $compile(template)(scope);\r\n            });\r\n        }\r\n    };\r\n}\r\nexports.ngTablePagination = ngTablePagination;\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nngTableSelectFilterDs.$inject = [];\r\n/**\r\n * Takes the array returned by $column.filterData and makes it available as `$selectData` on the `$scope`.\r\n *\r\n * The resulting `$selectData` array will contain an extra item that is suitable to represent the user\r\n * \"deselecting\" an item from a `<select>` tag\r\n *\r\n * This directive is is focused on providing a datasource to an `ngOptions` directive\r\n * @ngdoc directive\r\n * @private\r\n */\r\nfunction ngTableSelectFilterDs() {\r\n    // note: not using isolated or child scope \"by design\"\r\n    // this is to allow this directive to be combined with other directives that do\r\n    var directive = {\r\n        restrict: 'A',\r\n        controller: ngTableSelectFilterDsController\r\n    };\r\n    return directive;\r\n}\r\nexports.ngTableSelectFilterDs = ngTableSelectFilterDs;\r\nngTableSelectFilterDsController.$inject = ['$scope', '$parse', '$attrs', '$q'];\r\nfunction ngTableSelectFilterDsController($scope, $parse, $attrs, $q) {\r\n    var $column;\r\n    init();\r\n    function init() {\r\n        $column = $parse($attrs.ngTableSelectFilterDs)($scope);\r\n        $scope.$watch(function () {\r\n            return $column && $column.data;\r\n        }, bindDataSource);\r\n    }\r\n    function bindDataSource() {\r\n        getSelectListData($column).then(function (data) {\r\n            if (data && !hasEmptyOption(data)) {\r\n                data.unshift({ id: '', title: '' });\r\n            }\r\n            data = data || [];\r\n            $scope.$selectData = data;\r\n        });\r\n    }\r\n    function hasEmptyOption(data) {\r\n        var isMatch;\r\n        for (var i = 0; i < data.length; i++) {\r\n            var item = data[i];\r\n            if (item && item.id === '') {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n        return isMatch;\r\n    }\r\n    function getSelectListData($column) {\r\n        var dataInput = $column.data;\r\n        if (dataInput instanceof Array) {\r\n            return $q.when(dataInput);\r\n        }\r\n        else {\r\n            return $q.when(dataInput && dataInput());\r\n        }\r\n    }\r\n}\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar templateUrl = __webpack_require__(32);\r\nngTableSorterRow.$inject = [];\r\n/**\r\n * directive that renders the sorting header row for a table\r\n * @ngdoc directive\r\n * @example\r\n * ```html\r\n * <ng-table-sorter-row></ng-table-sorter-row>\r\n * ```\r\n */\r\nfunction ngTableSorterRow() {\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: templateUrl,\r\n        scope: true,\r\n        controller: 'ngTableSorterRowController'\r\n    };\r\n    return directive;\r\n}\r\nexports.ngTableSorterRow = ngTableSorterRow;\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\r\nngTableSorterRowController.$inject = ['$scope'];\r\n/**\r\n * Controller for the {@link ngTableSorterRow ngTableSorterRow} directive\r\n */\r\nfunction ngTableSorterRowController($scope) {\r\n    $scope.sortBy = sortBy;\r\n    $scope.resetSortDesc = resetSortDesc;\r\n    ///////////\r\n    function sortBy($column, event) {\r\n        var parsedSortable = $column.sortable && $column.sortable();\r\n        if (!parsedSortable || typeof parsedSortable !== 'string') {\r\n            return;\r\n        }\r\n        else {\r\n            var defaultSort = $scope.params.settings().defaultSort;\r\n            var inverseSort = (defaultSort === 'asc' ? 'desc' : 'asc');\r\n            var sorting = $scope.params.sorting() && $scope.params.sorting()[parsedSortable] && ($scope.params.sorting()[parsedSortable] === defaultSort);\r\n            var sortingParams = (event.ctrlKey || event.metaKey) ? $scope.params.sorting() : {};\r\n            sortingParams[parsedSortable] = (sorting ? inverseSort : defaultSort);\r\n            $scope.params.parameters({\r\n                sorting: sortingParams\r\n            });\r\n            $scope.sortDesc = JSON.parse(JSON.stringify(sortingParams));\r\n            if (sortingParams[parsedSortable] == 'asc')\r\n                $scope.sortDesc[parsedSortable] = \"Sort \" + $column.title() + \" in ascending order\";\r\n            else if (sortingParams[parsedSortable] == 'desc')\r\n                $scope.sortDesc[parsedSortable] = \"Sort \" + $column.title() + \" in descending order\";\r\n        }\r\n    }\r\n    function resetSortDesc($column) {\r\n        $scope.sortDesc = {};\r\n    }\r\n}\r\nexports.ngTableSorterRowController = ngTableSorterRowController;\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar ng1 = __webpack_require__(0);\r\n/**\r\n * Allows for the configuration of the ngTableDefaultGetData service.\r\n *\r\n * Set filterFilterName to the name of a angular filter that knows how to apply the values returned by\r\n * `NgTableParams.filter()` to restrict an array of data.\r\n *\r\n * Set sortingFilterName to the name of a angular filter that knows how to apply the values returned by\r\n * `NgTableParams.orderBy()` to sort an array of data.\r\n *\r\n * Out of the box the `ngTableDefaultGetData` service will be configured to use the angular `filter` and `orderBy`\r\n * filters respectively\r\n *\r\n * @ngdoc provider\r\n */\r\nvar ngTableDefaultGetDataProvider = (function () {\r\n    function ngTableDefaultGetDataProvider() {\r\n        this.filterFilterName = 'filter';\r\n        this.sortingFilterName = 'orderBy';\r\n        var provider = this;\r\n        this.$get = ngTableDefaultGetData;\r\n        ngTableDefaultGetData.$inject = ['$filter'];\r\n        /**\r\n         * Implementation of the {@link IDefaultGetData IDefaultGetData} interface\r\n         *\r\n         * @ngdoc service\r\n         */\r\n        function ngTableDefaultGetData($filter) {\r\n            var defaultDataOptions = { applyFilter: true, applySort: true, applyPaging: true };\r\n            getData.applyPaging = applyPaging;\r\n            getData.getFilterFn = getFilterFn;\r\n            getData.getOrderByFn = getOrderByFn;\r\n            return getData;\r\n            function getFilterFn(params) {\r\n                var filterOptions = params.settings().filterOptions;\r\n                if (ng1.isFunction(filterOptions.filterFn)) {\r\n                    return filterOptions.filterFn;\r\n                }\r\n                else {\r\n                    return $filter(filterOptions.filterFilterName || provider.filterFilterName);\r\n                }\r\n            }\r\n            function getOrderByFn(params) {\r\n                return $filter(provider.sortingFilterName);\r\n            }\r\n            function applyFilter(data, params) {\r\n                if (!params.hasFilter()) {\r\n                    return data;\r\n                }\r\n                var filter = params.filter(true);\r\n                var filterKeys = Object.keys(filter);\r\n                var parsedFilter = filterKeys.reduce(function (result, key) {\r\n                    result = setPath(result, filter[key], key);\r\n                    return result;\r\n                }, {});\r\n                var filterFn = getFilterFn(params);\r\n                return filterFn.call(params, data, parsedFilter, params.settings().filterOptions.filterComparator);\r\n            }\r\n            function applyPaging(data, params) {\r\n                var pagedData = data.slice((params.page() - 1) * params.count(), params.page() * params.count());\r\n                params.total(data.length); // set total for recalc pagination\r\n                return pagedData;\r\n            }\r\n            function applySort(data, params) {\r\n                var orderBy = params.orderBy();\r\n                var orderByFn = getOrderByFn(params);\r\n                return orderBy.length ? orderByFn(data, orderBy) : data;\r\n            }\r\n            function getData(data, params) {\r\n                if (data == null) {\r\n                    return [];\r\n                }\r\n                var options = ng1.extend({}, defaultDataOptions, params.settings().dataOptions);\r\n                var fData = options.applyFilter ? applyFilter(data, params) : data;\r\n                var orderedData = options.applySort ? applySort(fData, params) : fData;\r\n                return options.applyPaging ? applyPaging(orderedData, params) : orderedData;\r\n            }\r\n            // Sets the value at any depth in a nested object based on the path\r\n            // note: adapted from: underscore-contrib#setPath\r\n            function setPath(obj, value, path) {\r\n                var keys = path.split('.');\r\n                var ret = obj;\r\n                var lastKey = keys[keys.length - 1];\r\n                var target = ret;\r\n                var parentPathKeys = keys.slice(0, keys.length - 1);\r\n                parentPathKeys.forEach(function (key) {\r\n                    if (!target.hasOwnProperty(key)) {\r\n                        target[key] = {};\r\n                    }\r\n                    target = target[key];\r\n                });\r\n                target[lastKey] = value;\r\n                return ret;\r\n            }\r\n        }\r\n    }\r\n    return ngTableDefaultGetDataProvider;\r\n}());\r\nexports.ngTableDefaultGetDataProvider = ngTableDefaultGetDataProvider;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\n/**\r\n * Default values for ngTable\r\n * @ngdoc object\r\n */\r\nexports.ngTableDefaults = {\r\n    params: {},\r\n    settings: {}\r\n};\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar ng1 = __webpack_require__(0);\r\nngTableEventsChannel.$inject = ['$rootScope'];\r\n/**\r\n * Implementation of the {@link IEventsChannel IEventsChannel} interface\r\n * @ngdoc service\r\n */\r\nfunction ngTableEventsChannel($rootScope) {\r\n    var events = {};\r\n    events = addTableParamsEvent('afterCreated', events);\r\n    events = addTableParamsEvent('afterReloadData', events);\r\n    events = addTableParamsEvent('datasetChanged', events);\r\n    events = addTableParamsEvent('pagesChanged', events);\r\n    return events;\r\n    //////////\r\n    function addTableParamsEvent(eventName, target) {\r\n        var fnName = eventName.charAt(0).toUpperCase() + eventName.substring(1);\r\n        var event = (_a = {},\r\n            _a['on' + fnName] = createEventSubscriptionFn(eventName),\r\n            _a['publish' + fnName] = createPublishEventFn(eventName),\r\n            _a\r\n        );\r\n        return ng1.extend(target, event);\r\n        var _a;\r\n    }\r\n    function createEventSubscriptionFn(eventName) {\r\n        return function subscription(handler, eventSelectorOrScope, eventSelector) {\r\n            var actualEvtSelector;\r\n            var scope = $rootScope;\r\n            if (isScopeLike(eventSelectorOrScope)) {\r\n                scope = eventSelectorOrScope;\r\n                actualEvtSelector = createEventSelectorFn(eventSelector);\r\n            }\r\n            else {\r\n                actualEvtSelector = createEventSelectorFn(eventSelectorOrScope);\r\n            }\r\n            return scope.$on('ngTable:' + eventName, function (event, params) {\r\n                var eventArgs = [];\r\n                for (var _i = 2; _i < arguments.length; _i++) {\r\n                    eventArgs[_i - 2] = arguments[_i];\r\n                }\r\n                // don't send events published by the internal NgTableParams created by ngTableController\r\n                if (params.isNullInstance)\r\n                    return;\r\n                var fnArgs = [params].concat(eventArgs);\r\n                if (actualEvtSelector.apply(this, fnArgs)) {\r\n                    handler.apply(this, fnArgs);\r\n                }\r\n            });\r\n        };\r\n        function createEventSelectorFn(eventSelector) {\r\n            if (!eventSelector) {\r\n                return function (publisher) { return true; };\r\n            }\r\n            else if (isEventSelectorFunc(eventSelector)) {\r\n                return eventSelector;\r\n            }\r\n            else {\r\n                // shorthand for subscriber to only receive events from a specific publisher instance\r\n                return function (publisher) { return publisher === eventSelector; };\r\n            }\r\n        }\r\n        function isEventSelectorFunc(val) {\r\n            return typeof val === 'function';\r\n        }\r\n        function isScopeLike(val) {\r\n            return val && typeof val.$new === 'function';\r\n        }\r\n    }\r\n    function createPublishEventFn(eventName) {\r\n        return function publish() {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i - 0] = arguments[_i];\r\n            }\r\n            $rootScope.$broadcast.apply($rootScope, ['ngTable:' + eventName].concat(args));\r\n        };\r\n    }\r\n}\r\nexports.ngTableEventsChannel = ngTableEventsChannel;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\"use strict\";\r\nvar ng1 = __webpack_require__(0);\r\nngTableParamsFactory.$inject = [\r\n    '$q', '$log', '$filter', 'ngTableDefaults', 'ngTableDefaultGetData', 'ngTableEventsChannel'\r\n];\r\n/**\r\n * Implmenentation of the {@link INgTableParams INgTableParams} interface\r\n * @ngdoc service\r\n */\r\nfunction ngTableParamsFactory($q, $log, $filter, ngTableDefaults, ngTableDefaultGetData, ngTableEventsChannel) {\r\n    return NgTableParams;\r\n    function NgTableParams(baseParameters, baseSettings) {\r\n        this.currentPage = \"\";\r\n        this.focusElement = \"\";\r\n        function isNumber(n) {\r\n            return !isNaN(parseFloat(n)) && isFinite(n);\r\n        }\r\n        // the ngTableController \"needs\" to create a dummy/null instance and it's important to know whether an instance\r\n        // is one of these\r\n        if (typeof baseParameters === \"boolean\") {\r\n            this.isNullInstance = true;\r\n        }\r\n        var self = this, prevParamsMemento, errParamsMemento, isCommittedDataset = false, initialEvents = [], log = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i - 0] = arguments[_i];\r\n            }\r\n            if (_settings.debugMode && $log.debug) {\r\n                $log.debug.apply($log, args);\r\n            }\r\n        }, defaultFilterOptions = {\r\n            filterComparator: undefined,\r\n            filterDelay: 500,\r\n            filterDelayThreshold: 10000,\r\n            filterFilterName: undefined,\r\n            filterFn: undefined,\r\n            filterLayout: 'stack' // alternative: 'horizontal'\r\n        }, defaultGroupOptions = {\r\n            defaultSort: 'asc',\r\n            isExpanded: true\r\n        }, defaultSettingsFns = getDefaultSettingFns();\r\n        this.data = [];\r\n        this.parameters = function (newParameters, parseParamsFromUrl) {\r\n            parseParamsFromUrl = parseParamsFromUrl || false;\r\n            if (typeof newParameters !== undefined) {\r\n                for (var key in newParameters) {\r\n                    var value = newParameters[key];\r\n                    if (parseParamsFromUrl && key.indexOf('[') >= 0) {\r\n                        var keys = key.split(/\\[(.*)\\]/).reverse();\r\n                        var lastKey = '';\r\n                        for (var i = 0, len = keys.length; i < len; i++) {\r\n                            var name = keys[i];\r\n                            if (name !== '') {\r\n                                var v = value;\r\n                                value = {};\r\n                                value[lastKey = name] = (isNumber(v) ? parseFloat(v) : v);\r\n                            }\r\n                        }\r\n                        if (lastKey === 'sorting') {\r\n                            _params[lastKey] = {};\r\n                        }\r\n                        _params[lastKey] = ng1.extend(_params[lastKey] || {}, value[lastKey]);\r\n                    }\r\n                    else {\r\n                        if (key === 'group') {\r\n                            _params[key] = parseGroup(newParameters[key]);\r\n                        }\r\n                        else {\r\n                            _params[key] = (isNumber(newParameters[key]) ? parseFloat(newParameters[key]) : newParameters[key]);\r\n                        }\r\n                    }\r\n                }\r\n                log('ngTable: set parameters', _params);\r\n                return this;\r\n            }\r\n            return _params;\r\n        };\r\n        function parseGroup(group) {\r\n            var defaultSort = _settings.groupOptions && _settings.groupOptions.defaultSort;\r\n            if (!group) {\r\n                return group;\r\n            }\r\n            else if (isGroupingFun(group)) {\r\n                if (group.sortDirection == null) {\r\n                    group.sortDirection = defaultSort;\r\n                }\r\n                return group;\r\n            }\r\n            else if (typeof group === 'object') {\r\n                for (var key in group) {\r\n                    if (group[key] == null) {\r\n                        group[key] = defaultSort;\r\n                    }\r\n                }\r\n                return group;\r\n            }\r\n            else {\r\n                return (_a = {},\r\n                    _a[group] = defaultSort,\r\n                    _a\r\n                );\r\n            }\r\n            var _a;\r\n        }\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#settings\r\n         * @description Set new settings for table\r\n         *\r\n         * @param {string} newSettings New settings or undefined\r\n         * @returns {Object} Current settings or `this`\r\n         */\r\n        this.settings = function (newSettings) {\r\n            if (ng1.isDefined(newSettings)) {\r\n                // todo: don't modify newSettings object: this introduces unexpected side effects;\r\n                // instead take a copy of newSettings\r\n                if (newSettings.filterOptions) {\r\n                    newSettings.filterOptions = ng1.extend({}, _settings.filterOptions, newSettings.filterOptions);\r\n                }\r\n                if (newSettings.groupOptions) {\r\n                    newSettings.groupOptions = ng1.extend({}, _settings.groupOptions, newSettings.groupOptions);\r\n                }\r\n                if (ng1.isArray(newSettings.dataset)) {\r\n                    //auto-set the total from passed in dataset\r\n                    newSettings.total = newSettings.dataset.length;\r\n                }\r\n                var originalDataset = _settings.dataset;\r\n                _settings = ng1.extend(_settings, newSettings);\r\n                if (ng1.isArray(newSettings.dataset)) {\r\n                    optimizeFilterDelay();\r\n                }\r\n                // note: using != as want null and undefined to be treated the same\r\n                var hasDatasetChanged = newSettings.hasOwnProperty('dataset') && (newSettings.dataset != originalDataset);\r\n                if (hasDatasetChanged) {\r\n                    if (isCommittedDataset) {\r\n                        this.page(1); // reset page as a new dataset has been supplied\r\n                    }\r\n                    isCommittedDataset = false;\r\n                    var fireEvent = function () {\r\n                        ngTableEventsChannel.publishDatasetChanged(self, newSettings.dataset, originalDataset);\r\n                    };\r\n                    if (initialEvents) {\r\n                        initialEvents.push(fireEvent);\r\n                    }\r\n                    else {\r\n                        fireEvent();\r\n                    }\r\n                }\r\n                log('ngTable: set settings', _settings);\r\n                return this;\r\n            }\r\n            return _settings;\r\n        };\r\n        // Set translated accessibility options\r\n        this.setAccessibilityOptions = function () {\r\n            if (_settings.translations != null) {\r\n                _params.accessibilityOptions = _settings.translations;\r\n            }\r\n        };\r\n        this.page = function (page) {\r\n            if (page !== undefined) {\r\n                this.currentPage = page;\r\n            }\r\n            return page !== undefined ? this.parameters({\r\n                'page': page\r\n            }) : _params.page;\r\n        };\r\n        // wrapper for page() function so that focus can be\r\n        // retained on the button that initiated the page change\r\n        this.pageFocus = function (page, event) {\r\n            // function can be removed after all references to it are removed and replaced with page()\r\n            // this.pageButtonToRefocus = event.target;\r\n            return this.page(page);\r\n        };\r\n        this.accessibilityOptions = function (field) {\r\n            if (field != null && field !== undefined) {\r\n                return _params.accessibilityOptions[field] ? _params.accessibilityOptions[field] : '';\r\n            }\r\n            return '';\r\n        };\r\n        this.total = function (total) {\r\n            return total !== undefined ? this.settings({\r\n                'total': total\r\n            }) : _settings.total;\r\n        };\r\n        this.count = function (count) {\r\n            // reset to first page because can be blank page\r\n            return count !== undefined ? this.parameters({\r\n                'count': count,\r\n                'page': 1\r\n            }) : _params.count;\r\n        };\r\n        this.filter = function (filter) {\r\n            if (filter != null && typeof filter === 'object') {\r\n                return this.parameters({\r\n                    'filter': filter,\r\n                    'page': 1\r\n                });\r\n            }\r\n            else if (filter === true) {\r\n                var keys = Object.keys(_params.filter);\r\n                var significantFilter = {};\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var filterValue = _params.filter[keys[i]];\r\n                    if (filterValue != null && filterValue !== '') {\r\n                        significantFilter[keys[i]] = filterValue;\r\n                    }\r\n                }\r\n                return significantFilter;\r\n            }\r\n            else {\r\n                return _params.filter;\r\n            }\r\n        };\r\n        this.group = function (group, sortDirection) {\r\n            if (group === undefined) {\r\n                return _params.group;\r\n            }\r\n            var newParameters = {\r\n                page: 1\r\n            };\r\n            if (isGroupingFun(group) && sortDirection !== undefined) {\r\n                group.sortDirection = sortDirection;\r\n                newParameters.group = group;\r\n            }\r\n            else if (typeof group === 'string' && sortDirection !== undefined) {\r\n                newParameters.group = (_a = {}, _a[group] = sortDirection, _a);\r\n            }\r\n            else {\r\n                newParameters.group = group;\r\n            }\r\n            this.parameters(newParameters);\r\n            return this;\r\n            var _a;\r\n        };\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#sorting\r\n         * @description If 'sorting' parameter is not set, return current sorting. Otherwise set current sorting.\r\n         *\r\n         * @param {string} sorting New sorting\r\n         * @returns {Object} Current sorting or `this`\r\n         */\r\n        this.sorting = function (sorting, direction) {\r\n            if (typeof sorting === 'string' && direction !== undefined) {\r\n                this.parameters({\r\n                    'sorting': (_a = {}, _a[sorting] = direction, _a)\r\n                });\r\n                return this;\r\n            }\r\n            return sorting !== undefined ? this.parameters({\r\n                'sorting': sorting\r\n            }) : _params.sorting;\r\n            var _a;\r\n        };\r\n        this.isSortBy = function (field, direction) {\r\n            if (direction !== undefined) {\r\n                return _params.sorting[field] !== undefined && _params.sorting[field] == direction;\r\n            }\r\n            else {\r\n                return _params.sorting[field] !== undefined;\r\n            }\r\n        };\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#orderBy\r\n         * @description Return object of sorting parameters for angular filter\r\n         *\r\n         * @returns {Array} Array like: [ '-name', '+age' ]\r\n         */\r\n        this.orderBy = function () {\r\n            return convertSortToOrderBy(_params.sorting);\r\n        };\r\n        function convertSortToOrderBy(sorting) {\r\n            var result = [];\r\n            for (var column in sorting) {\r\n                result.push((sorting[column] === \"asc\" ? \"+\" : \"-\") + column);\r\n            }\r\n            return result;\r\n        }\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#generatePagesArray\r\n         * @description Generate array of pages\r\n         *\r\n         * When no arguments supplied, the current parameter state of this `NgTableParams` instance will be used\r\n         *\r\n         * @param {boolean} currentPage which page must be active\r\n         * @param {boolean} totalItems  Total quantity of items\r\n         * @param {boolean} pageSize    Quantity of items on page\r\n         * @param {number} maxBlocks    Quantity of blocks for pagination\r\n         * @returns {Array} Array of pages\r\n         */\r\n        this.generatePagesArray = function (currentPage, totalItems, pageSize, maxBlocks) {\r\n            if (!arguments.length) {\r\n                currentPage = this.page();\r\n                totalItems = this.total();\r\n                pageSize = this.count();\r\n            }\r\n            var maxPage, maxPivotPages, minPage, numPages;\r\n            maxBlocks = maxBlocks && maxBlocks < 6 ? 6 : maxBlocks;\r\n            var pages = [];\r\n            numPages = Math.ceil(totalItems / pageSize);\r\n            if (numPages > 1) {\r\n                pages.push({\r\n                    type: 'prev',\r\n                    number: Math.max(1, currentPage - 1),\r\n                    active: currentPage > 1\r\n                });\r\n                pages.push({\r\n                    type: 'first',\r\n                    number: 1,\r\n                    active: currentPage > 1,\r\n                    current: currentPage === 1\r\n                });\r\n                maxPivotPages = Math.round((_settings.paginationMaxBlocks - _settings.paginationMinBlocks) / 2);\r\n                minPage = Math.max(2, currentPage - maxPivotPages);\r\n                maxPage = Math.min(numPages - 1, currentPage + maxPivotPages * 2 - (currentPage - minPage));\r\n                minPage = Math.max(2, minPage - (maxPivotPages * 2 - (maxPage - minPage)));\r\n                var i = minPage;\r\n                while (i <= maxPage) {\r\n                    if ((i === minPage && i !== 2) || (i === maxPage && i !== numPages - 1)) {\r\n                        pages.push({\r\n                            type: 'more',\r\n                            active: false\r\n                        });\r\n                    }\r\n                    else {\r\n                        pages.push({\r\n                            type: 'page',\r\n                            number: i,\r\n                            active: currentPage !== i,\r\n                            current: currentPage === i\r\n                        });\r\n                    }\r\n                    i++;\r\n                }\r\n                pages.push({\r\n                    type: 'last',\r\n                    number: numPages,\r\n                    active: currentPage !== numPages,\r\n                    current: currentPage === numPages\r\n                });\r\n                pages.push({\r\n                    type: 'next',\r\n                    number: Math.min(numPages, currentPage + 1),\r\n                    active: currentPage < numPages\r\n                });\r\n            }\r\n            return pages;\r\n        };\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#isDataReloadRequired\r\n         * @description Return true when a change to this `NgTableParams` instance should require the reload method\r\n         * to be run so as to ensure the data presented to the user reflects the `NgTableParams`\r\n         *\r\n         * Note that this method will return false when the reload method has run but fails. In this case\r\n         * `hasErrorState` will return true.\r\n         */\r\n        this.isDataReloadRequired = function () {\r\n            // note: using != as want to treat null and undefined the same\r\n            return !isCommittedDataset || !ng1.equals(createComparableParams(), prevParamsMemento)\r\n                || hasGlobalSearchFieldChanges();\r\n        };\r\n        function createComparableParams() {\r\n            var group = _params.group;\r\n            return {\r\n                params: _params,\r\n                groupSortDirection: isGroupingFun(group) ? group.sortDirection : undefined\r\n            };\r\n        }\r\n        function isGroupingFun(val) {\r\n            return typeof val === 'function';\r\n        }\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#hasFilter\r\n         * @description Determines if NgTableParams#filter has significant filter value(s)\r\n         * (any value except null, undefined, or empty string)\r\n         * @returns {Boolean} true when NgTableParams#filter has at least one significant field value\r\n         */\r\n        this.hasFilter = function () {\r\n            return Object.keys(this.filter(true)).length > 0;\r\n        };\r\n        this.hasGroup = function (group, sortDirection) {\r\n            if (group == null) {\r\n                return isGroupingFun(_params.group) || Object.keys(_params.group).length > 0;\r\n            }\r\n            if (isGroupingFun(group)) {\r\n                if (sortDirection == null) {\r\n                    return _params.group === group;\r\n                }\r\n                else {\r\n                    return _params.group === group && group.sortDirection === sortDirection;\r\n                }\r\n            }\r\n            else {\r\n                if (sortDirection == null) {\r\n                    return Object.keys(_params.group).indexOf(group) !== -1;\r\n                }\r\n                else {\r\n                    return _params.group[group] === sortDirection;\r\n                }\r\n            }\r\n        };\r\n        this.hasFilterChanges = function () {\r\n            var previousFilter = (prevParamsMemento && prevParamsMemento.params.filter);\r\n            return !ng1.equals((_params.filter), previousFilter) || hasGlobalSearchFieldChanges();\r\n        };\r\n        function hasGlobalSearchFieldChanges() {\r\n            var currentVal = (_params.filter && _params.filter['$']);\r\n            var previousVal = (prevParamsMemento && prevParamsMemento.params.filter && prevParamsMemento.params.filter['$']);\r\n            return !ng1.equals(currentVal, previousVal);\r\n        }\r\n        this.url = function (asString) {\r\n            // this function is an example of Typescript gone bad!!\r\n            asString = asString || false;\r\n            var pairs = (asString ? [] : {});\r\n            for (var key in _params) {\r\n                if (_params.hasOwnProperty(key)) {\r\n                    var item = _params[key], name = encodeURIComponent(key);\r\n                    if (typeof item === \"object\") {\r\n                        for (var subkey in item) {\r\n                            if (isSignificantValue(item[subkey], key)) {\r\n                                var pname = name + \"[\" + encodeURIComponent(subkey) + \"]\";\r\n                                collectValue(item[subkey], pname);\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (!ng1.isFunction(item) && isSignificantValue(item, key)) {\r\n                        collectValue(item, name);\r\n                    }\r\n                }\r\n            }\r\n            return pairs;\r\n            function collectValue(value, key) {\r\n                if (isArray(pairs)) {\r\n                    pairs.push(key + \"=\" + encodeURIComponent(value));\r\n                }\r\n                else {\r\n                    pairs[key] = encodeURIComponent(value);\r\n                }\r\n            }\r\n            function isArray(pairs) {\r\n                return asString;\r\n            }\r\n            function isSignificantValue(value, key) {\r\n                return key === \"group\" ? true : typeof value !== undefined && value !== \"\";\r\n            }\r\n        };\r\n        this.reload = function () {\r\n            var self = this, pData = null;\r\n            _settings.$loading = true;\r\n            prevParamsMemento = ng1.copy(createComparableParams());\r\n            isCommittedDataset = true;\r\n            if (self.hasGroup()) {\r\n                pData = runInterceptorPipeline($q.when(_settings.getGroups(self)));\r\n            }\r\n            else {\r\n                var fn = _settings.getData;\r\n                pData = runInterceptorPipeline($q.when(fn(self)));\r\n            }\r\n            log('ngTable: reload data');\r\n            var oldData = self.data;\r\n            return pData.then(function (data) {\r\n                _settings.$loading = false;\r\n                errParamsMemento = null;\r\n                self.data = data;\r\n                // note: I think it makes sense to publish this event even when data === oldData\r\n                // subscribers can always set a filter to only receive the event when data !== oldData\r\n                ngTableEventsChannel.publishAfterReloadData(self, data, oldData);\r\n                self.reloadPages();\r\n                return data;\r\n            }).catch(function (reason) {\r\n                errParamsMemento = prevParamsMemento;\r\n                // \"rethrow\"\r\n                return $q.reject(reason);\r\n            });\r\n        };\r\n        this.hasErrorState = function () {\r\n            return !!(errParamsMemento && ng1.equals(errParamsMemento, createComparableParams()));\r\n        };\r\n        function optimizeFilterDelay() {\r\n            // don't debounce by default filter input when working with small synchronous datasets\r\n            if (_settings.filterOptions.filterDelay === defaultFilterOptions.filterDelay &&\r\n                _settings.total <= _settings.filterOptions.filterDelayThreshold &&\r\n                _settings.getData === defaultSettingsFns.getData) {\r\n                _settings.filterOptions.filterDelay = 0;\r\n            }\r\n        }\r\n        this.reloadPages = (function () {\r\n            var currentPages;\r\n            return function () {\r\n                var oldPages = currentPages;\r\n                var newPages = self.generatePagesArray(self.page(), self.total(), self.count());\r\n                if (!ng1.equals(oldPages, newPages)) {\r\n                    currentPages = newPages;\r\n                    ngTableEventsChannel.publishPagesChanged(this, newPages, oldPages);\r\n                }\r\n            };\r\n        })();\r\n        function runInterceptorPipeline(fetchedData) {\r\n            var interceptors = _settings.interceptors || [];\r\n            return interceptors.reduce(function (result, interceptor) {\r\n                var thenFn = (interceptor.response && interceptor.response.bind(interceptor)) || $q.when;\r\n                var rejectFn = (interceptor.responseError && interceptor.responseError.bind(interceptor)) || $q.reject;\r\n                return result.then(function (data) {\r\n                    return thenFn(data, self);\r\n                }, function (reason) {\r\n                    return rejectFn(reason, self);\r\n                });\r\n            }, fetchedData);\r\n        }\r\n        function getDefaultSettingFns() {\r\n            return {\r\n                getData: getData,\r\n                getGroups: getGroups\r\n            };\r\n            /**\r\n             * @ngdoc method\r\n             * @name settings#getData\r\n             * @description Returns the data to display in the table\r\n             *\r\n             * Called by `NgTableParams` whenever it considers new data is to be loaded\r\n             *\r\n             * @param {Object} params the `NgTableParams` requesting data\r\n             */\r\n            function getData(params) {\r\n                return ngTableDefaultGetData(params.settings().dataset, params);\r\n            }\r\n            /**\r\n             * @ngdoc method\r\n             * @name settings#getGroups\r\n             * @description Return groups of data to display in the table\r\n             *\r\n             * Called by `NgTableParams` whenever it considers new data is to be loaded\r\n             * and when a `group` value has been assigned\r\n             *\r\n             * @param {Object} params the `NgTableParams` requesting data\r\n             */\r\n            function getGroups(params) {\r\n                var group = params.group();\r\n                var groupFn;\r\n                var sortDirection = undefined;\r\n                if (isGroupingFun(group)) {\r\n                    groupFn = group;\r\n                    sortDirection = group.sortDirection;\r\n                }\r\n                else {\r\n                    // currently support for only one group implemented\r\n                    var groupField = Object.keys(group)[0];\r\n                    sortDirection = group[groupField];\r\n                    groupFn = function (item) {\r\n                        return getPath(item, groupField);\r\n                    };\r\n                }\r\n                var settings = params.settings();\r\n                var originalDataOptions = settings.dataOptions;\r\n                settings.dataOptions = { applyPaging: false };\r\n                var getData = settings.getData;\r\n                var gotData = $q.when(getData(params));\r\n                return gotData.then(function (data) {\r\n                    var groups = {};\r\n                    ng1.forEach(data, function (item) {\r\n                        var groupName = groupFn(item);\r\n                        groups[groupName] = groups[groupName] || {\r\n                            data: [],\r\n                            $hideRows: !settings.groupOptions.isExpanded,\r\n                            value: groupName\r\n                        };\r\n                        groups[groupName].data.push(item);\r\n                    });\r\n                    var result = [];\r\n                    for (var i in groups) {\r\n                        result.push(groups[i]);\r\n                    }\r\n                    if (sortDirection) {\r\n                        var orderByFn = ngTableDefaultGetData.getOrderByFn();\r\n                        var orderBy = convertSortToOrderBy({\r\n                            value: sortDirection\r\n                        });\r\n                        result = orderByFn(result, orderBy);\r\n                    }\r\n                    return ngTableDefaultGetData.applyPaging(result, params);\r\n                }).finally(function () {\r\n                    // restore the real options\r\n                    settings.dataOptions = originalDataOptions;\r\n                });\r\n            }\r\n            function getPath(obj, ks) {\r\n                // origianl source https://github.com/documentcloud/underscore-contrib\r\n                var keys;\r\n                if (typeof ks === \"string\") {\r\n                    keys = ks.split(\".\");\r\n                }\r\n                else {\r\n                    keys = ks;\r\n                }\r\n                // If we have reached an undefined property\r\n                // then stop executing and return undefined\r\n                if (obj === undefined)\r\n                    return void 0;\r\n                // If the path array has no more elements, we've reached\r\n                // the intended property and return its value\r\n                if (keys.length === 0)\r\n                    return obj;\r\n                // If we still have elements in the path array and the current\r\n                // value is null, stop executing and return undefined\r\n                if (obj === null)\r\n                    return void 0;\r\n                return getPath(obj[keys[0]], keys.slice(1));\r\n            }\r\n        }\r\n        var _params = {\r\n            page: 1,\r\n            count: 10,\r\n            filter: {},\r\n            sorting: {},\r\n            group: {},\r\n            accessibilityOptions: {\r\n                pagerTitle: 'Pagination',\r\n                current: 'Current Page',\r\n                more: 'More Pages',\r\n                next: 'Next Page',\r\n                prev: 'Previous Page',\r\n                pageNumPrefix: 'Page'\r\n            }\r\n        };\r\n        ng1.extend(_params, ngTableDefaults.params);\r\n        /**\r\n         * @ngdoc object\r\n         * @name settings\r\n         * @module ngTable\r\n         * @description configuration settings for `NgTableParams`\r\n         */\r\n        var _settings = {\r\n            $loading: false,\r\n            dataset: null,\r\n            translations: null,\r\n            total: 0,\r\n            defaultSort: 'desc',\r\n            filterOptions: ng1.copy(defaultFilterOptions),\r\n            groupOptions: ng1.copy(defaultGroupOptions),\r\n            counts: [10, 25, 50, 100],\r\n            interceptors: [],\r\n            paginationMaxBlocks: 11,\r\n            paginationMinBlocks: 5,\r\n            sortingIndicator: 'span'\r\n        };\r\n        this.settings(defaultSettingsFns);\r\n        this.settings(ngTableDefaults.settings);\r\n        this.settings(baseSettings);\r\n        this.parameters(baseParameters, true);\r\n        this.setAccessibilityOptions();\r\n        ngTableEventsChannel.publishAfterCreated(this);\r\n        // run events during construction after the initial create event. That way a consumer\r\n        // can subscribe to all events for a table without \"dropping\" an event\r\n        ng1.forEach(initialEvents, function (event) {\r\n            event();\r\n        });\r\n        initialEvents = null;\r\n        return this;\r\n    }\r\n}\r\nexports.ngTableParamsFactory = ngTableParamsFactory;\r\n\n\n/***/ },\n/* 23 */\n18,\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/filterRow.html';\nvar html = \"<tr ng-show=show_filter class=ng-table-filters> <th scope=col data-title-text=\\\"{{$column.titleAlt(this) || $column.title(this)}}\\\" ng-repeat=\\\"$column in $columns\\\" ng-if=$column.show(this) class=\\\"filter {{$column.class(this)}}\\\" ng-class=\\\"params.settings().filterOptions.filterLayout === 'horizontal' ? 'filter-horizontal' : ''\\\"> <div ng-repeat=\\\"(name, filter) in $column.filter(this)\\\" ng-include=config.getTemplateUrl(filter) class=filter-cell ng-class=\\\"[getFilterCellCss($column.filter(this), params.settings().filterOptions.filterLayout), $last ? 'last' : '']\\\"> </div> </th> </tr> \";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/filters/number.html';\nvar html = \"<input type=number name={{name}} ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"input-filter form-control\\\" placeholder=\\\"{{getFilterPlaceholderValue(filter, name)}}\\\"/> \";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/filters/select-multiple.html';\nvar html = \"<select ng-options=\\\"data.id as data.title for data in $column.data\\\" ng-disabled=$filterRow.disabled multiple=multiple ng-multiple=true ng-model=params.filter()[name] class=\\\"filter filter-select-multiple form-control\\\" name={{name}}> </select> \";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/filters/select.html';\nvar html = \"<select ng-options=\\\"data.id as data.title for data in $selectData\\\" ng-table-select-filter-ds=$column ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"filter filter-select form-control\\\" name={{name}}> <option style=display:none value=\\\"\\\"></option> </select> \";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/filters/text.html';\nvar html = \"<input type=text name={{name}} ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"input-filter form-control\\\" placeholder=\\\"{{getFilterPlaceholderValue(filter, name)}}\\\"/> \";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/groupRow.html';\nvar html = \"<tr ng-if=params.hasGroup() ng-show=$groupRow.show class=ng-table-group-header> <th colspan={{getVisibleColumns().length}} class=sortable ng-class=\\\"{\\r\\n                    'sort-asc': params.hasGroup($selGroup, 'asc'),\\r\\n                    'sort-desc':params.hasGroup($selGroup, 'desc')\\r\\n                  }\\\"> <a href=\\\"\\\" ng-click=\\\"isSelectorOpen = !isSelectorOpen\\\" class=ng-table-group-selector> <strong class=sort-indicator>{{$selGroupTitle}}</strong> <button class=\\\"btn btn-default btn-xs ng-table-group-close\\\" ng-click=\\\"$groupRow.show = false; $event.preventDefault(); $event.stopPropagation();\\\"> <span class=\\\"glyphicon glyphicon-remove\\\"></span> </button> <button class=\\\"btn btn-default btn-xs ng-table-group-toggle\\\" ng-click=\\\"toggleDetail(); $event.preventDefault(); $event.stopPropagation();\\\"> <span class=glyphicon ng-class=\\\"{\\r\\n                    'glyphicon-resize-small': params.settings().groupOptions.isExpanded,\\r\\n                    'glyphicon-resize-full': !params.settings().groupOptions.isExpanded\\r\\n                }\\\"></span> </button> </a> <div class=list-group ng-if=isSelectorOpen> <a href=\\\"\\\" class=list-group-item ng-repeat=\\\"group in getGroupables()\\\" ng-click=groupBy(group)> <strong>{{ getGroupTitle(group)}}</strong> <strong ng-class=\\\"isSelectedGroup(group) && 'sort-indicator'\\\"></strong> </a> </div> </th> </tr> \";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/header.html';\nvar html = \"<ng-table-group-row></ng-table-group-row> <ng-table-sorter-row></ng-table-sorter-row> <ng-table-filter-row></ng-table-filter-row> \";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/pager.html';\nvar html = \"<nav class=\\\"ng-cloak ng-table-pager\\\" ng-if=params.data.length aria-label=\\\"{{params.accessibilityOptions('pagerTitle')}}\\\"> <div ng-if=\\\" params.settings().counts.length \\\" class=\\\"ng-table-counts btn-group pull-right count-section\\\"> <button ng-repeat=\\\"count in params.settings().counts\\\" type=\\\"button \\\" ng-class=\\\"{ 'active':params.count()==count} \\\" ng-click=\\\"params.count(count) \\\" class=\\\"btn btn-default\\\"> <span ng-bind=\\\"count \\\"></span> </button> </div> <ul ng-if=pages.length class=\\\"pagination ng-table-pagination\\\"> <li ng-class=\\\"{ 'disabled': !page.active && !page.current, 'active': page.current}\\\" ng-repeat=\\\"page in pages\\\" ng-switch=page.type> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_prev ng-switch-when=prev ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_prev'\\\" aria-label=\\\"{{params.accessibilityOptions('prev')}}\\\" ng-disabled=\\\"{{ !page.active && !page.current ? true : undefined }}\\\"><i class=\\\"fa fa-angle-left\\\"></i></button> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_{{page.number}} ng-attr-aria-current=\\\"{{page.current ? 'page' : undefined}}\\\" ng-switch-when=first ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_' + page.number \\\" ng-disabled=\\\"{{ page.current ? true : undefined }}\\\" aria-label=\\\"{{params.accessibilityOptions('pageNumPrefix')}} {{page.number}}\\\" ng-disabled=\\\"{{ !page.active && !page.current ? true : undefined }}\\\">{{page.number}}</button> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_{{page.number}} ng-attr-aria-current=\\\"{{page.current ? 'page' : undefined}}\\\" ng-switch-when=page ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_' + page.number \\\" ng-disabled=\\\"{{ page.current ? true : undefined }}\\\" aria-label=\\\"{{params.accessibilityOptions('pageNumPrefix')}} {{page.number}}\\\">{{page.number}}</button> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_more ng-switch-when=more ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_more' \\\" aria-label=\\\"{{params.accessibilityOptions('more')}}\\\"><i class=\\\"fa fa-ellipsis-h\\\"></i></button> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_{{page.number}} ng-attr-aria-current=\\\"{{page.current ? 'page' : undefined}}\\\" ng-switch-when=last ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_' + page.number \\\" ng-disabled=\\\"{{ page.current ? true : undefined }}\\\" aria-label=\\\"{{params.accessibilityOptions('pageNumPrefix')}} {{page.number}}\\\">{{page.number}}</button> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_next ng-switch-when=next ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_next' \\\" aria-label=\\\"{{params.accessibilityOptions('next')}}\\\" ng-disabled=\\\"{{ !page.active && !page.current ? true : undefined }}\\\"><i class=\\\"fa fa-angle-right\\\"></i></button> </li> </ul> </nav> <span class=sr-only aria-live=assertive aria-hidden=true>{{ params.currentPage != '' ? params.accessibilityOptions('pageNumPrefix') + ' ' + params.currentPage : '' }}</span>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/sorterRow.html';\nvar html = \"<tr class=ng-table-sort-header role=row> <th scope=col title={{$column.headerTitle(this)}} role=columnheader ng-attr-aria-sort=\\\"{{!$column.sortable(this) ? undefined : params.sorting()[$column.sortable(this)]=='asc' ? 'ascending' : params.sorting()[$column.sortable(this)]=='desc' ? 'descending' : 'none'}}\\\" ng-repeat=\\\"$column in $columns\\\" ng-class=\\\"{ \\r\\n                    'sortable': $column.sortable(this),\\r\\n                    'sort-asc': params.sorting()[$column.sortable(this)]=='asc',\\r\\n                    'sort-desc': params.sorting()[$column.sortable(this)]=='desc'\\r\\n                  }\\\" ng-init=\\\"template = $column.headerTemplateURL(this)\\\" class=\\\"header {{$column.class(this)}}\\\" ng-if=$column.show(this)> <a role=button id=id_{{$index}} aria-describedby=sortDescription tabindex=0 ng-if=\\\"$column.sortable(this) && (template || $column.title(this))\\\" ng-click=\\\"sortBy($column, $event)\\\" ng-keydown=\\\"(($event.key === 'Enter' || $event.key === ' ') && sortBy($column, $event)) || ($event.keyCode == 9 && resetSortDesc($column))\\\" class=sort-button> <div ng-if=!template class=ng-table-header ng-class=\\\"{'sort-indicator': params.settings().sortingIndicator == 'div'}\\\"> <span ng-bind=$column.title(this) ng-class=\\\"{'sort-indicator': params.settings().sortingIndicator == 'span'}\\\">{{$column.title(this)}}</span> <i ng-if=\\\"(params.settings().sortingIndicator == 'div' || params.settings().sortingIndicator == 'span')\\\" class=\\\"fa fa-sort\\\" ng-class=\\\"{'fa-sort-up':params.sorting()[$column.sortable(this)]=='asc','fa-sort-down': params.sorting()[$column.sortable(this)]=='desc'}\\\" aria-hidden=true></i> <span class=sortDescription aria-hidden=false aria-live=polite ng-bind=sortDesc[$column.sortable(this)]></span> </div> <div ng-if=template ng-include=template></div> </a> <div ng-if=\\\"!$column.sortable(this) && (template || $column.title(this))\\\"> <div ng-if=!template class=ng-table-header> <span ng-bind=$column.title(this)></span> </div> <div ng-if=template ng-include=template></div> </div> </th> </tr>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nvar ng1 = __webpack_require__(0);\r\nvar core_1 = __webpack_require__(2);\r\nvar browser_1 = __webpack_require__(1);\r\nvar ngTable = ng1.module('ngTable', [core_1.default.name, browser_1.default.name]);\r\nexports.ngTable = ngTable;\r\n__export(__webpack_require__(2));\r\n__export(__webpack_require__(1));\r\n\n\n/***/ }\n/******/ ])))\n});\n;\n\n\n// WEBPACK FOOTER //\n// ng-table.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 33);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c8d6c44392eacbf0a5a8","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 0\n// module chunks = 0","import * as angular from 'angular';\r\nimport { ngTable } from './ngTable.directive';\r\nimport { ngTableColumn } from './ngTableColumn';\r\nimport { ngTableColumnsBinding } from './ngTableColumnsBinding.directive';\r\nimport { ngTableController } from './ngTableController';\r\nimport { ngTableDynamic } from './ngTableDynamic.directive';\r\nimport { ngTableFilterConfigProvider } from './ngTableFilterConfig';\r\nimport { ngTableFilterRow } from './ngTableFilterRow.directive';\r\nimport { ngTableFilterRowController } from './ngTableFilterRowController';\r\nimport { ngTableGroupRow } from './ngTableGroupRow.directive';\r\nimport { ngTableGroupRowController } from './ngTableGroupRowController';\r\nimport { ngTablePagination } from './ngTablePagination.directive';\r\nimport { ngTableSelectFilterDs } from './ngTableSelectFilterDs.directive';\r\nimport { ngTableSorterRow } from './ngTableSorterRow.directive';\r\nimport { ngTableSorterRowController } from './ngTableSorterRowController';\r\nimport './filters/number.html';\r\nimport './filters/select.html';\r\nimport './filters/select-multiple.html';\r\nimport './filters/text.html';\r\nimport './pager.html';\r\nimport './header.html';\r\n\r\nexport default angular.module('ngTable-browser', [])\r\n    .directive('ngTable', ngTable)\r\n    .factory('ngTableColumn', ngTableColumn)\r\n    .directive('ngTableColumnsBinding', ngTableColumnsBinding)\r\n    .controller('ngTableController', ngTableController)\r\n    .directive('ngTableDynamic', ngTableDynamic)\r\n    .provider('ngTableFilterConfig', ngTableFilterConfigProvider as any)\r\n    .directive('ngTableFilterRow', ngTableFilterRow)\r\n    .controller('ngTableFilterRowController', ngTableFilterRowController)\r\n    .directive('ngTableGroupRow', ngTableGroupRow)\r\n    .controller('ngTableGroupRowController', ngTableGroupRowController)\r\n    .directive('ngTablePagination', ngTablePagination)\r\n    .directive('ngTableSelectFilterDs', ngTableSelectFilterDs)\r\n    .directive('ngTableSorterRow', ngTableSorterRow)\r\n    .controller('ngTableSorterRowController', ngTableSorterRowController);\r\n\r\nexport * from './public-interfaces';\n\n\n// WEBPACK FOOTER //\n// ./src/browser/index.ts","import * as angular from 'angular';\r\nimport { ngTableDefaultGetDataProvider } from './ngTableDefaultGetData';\r\nimport { ngTableDefaults } from './ngTableDefaults';\r\nimport { ngTableParamsFactory } from './ngTableParams';\r\nimport { ngTableEventsChannel } from './ngTableEventsChannel';\r\n\r\nexport default angular.module('ngTable-core', [])\r\n    .provider('ngTableDefaultGetData', ngTableDefaultGetDataProvider)\r\n    .value('ngTableDefaults',ngTableDefaults)\r\n    .factory('NgTableParams', ngTableParamsFactory)\r\n    .factory('ngTableEventsChannel', ngTableEventsChannel);\r\n\r\nexport * from './public-interfaces';\n\n\n// WEBPACK FOOTER //\n// ./src/core/index.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\nimport { IAugmentedJQuery, IDirective, IQService, IParseService, IPromise, IScope } from 'angular';\r\nimport * as ng1 from 'angular';\r\nimport { \r\n    IColumnDef, ColumnFieldContext, IColumnField, IFilterTemplateDefMap, SelectData, ITableController, \r\n    ITableInputAttributes \r\n} from './public-interfaces';\r\n\r\ninterface IScopeExtensions {\r\n    $columns: IColumnDef[]\r\n}\r\n\r\nngTable.$inject = ['$q', '$parse'];\r\n\r\n/**\r\n * Directive that instantiates {@link ngTableController ngTableController}.\r\n * @ngdoc directive\r\n * @name ngTable\r\n * @example\r\n * \r\n * ```html\r\n * <table ng-table=\"$ctrl.tableParams\" show-filter=\"true\" class=\"table table-bordered\">\r\n *  <tr ng-repeat=\"user in $data\">\r\n *      <td data-title=\"'Name'\" sortable=\"'name'\" filter=\"{ 'name': 'text' }\">\r\n *          {{user.name}}\r\n *      </td>\r\n *      <td data-title=\"'Age'\" sortable=\"'age'\" filter=\"{ 'age': 'text' }\">\r\n *          {{user.age}}\r\n *      </td>\r\n *  </tr>\r\n * </table>\r\n * ```\r\n */\r\nexport function ngTable($q: IQService, $parse: IParseService) : IDirective {\r\n\r\n    return {\r\n        restrict: 'A',\r\n        priority: 1001,\r\n        scope: true,\r\n        controller: 'ngTableController',\r\n        compile: function(element: IAugmentedJQuery) {\r\n            element.attr('tabindex','-1');\r\n            var columns: IColumnDef[] = [],\r\n                i = 0,\r\n                dataRow: IAugmentedJQuery,\r\n                groupRow: IAugmentedJQuery,\r\n                rows: IAugmentedJQuery[] = [];\r\n\r\n            ng1.forEach(element.find('tr'), function(tr) {\r\n                rows.push(ng1.element(tr))\r\n            });\r\n            dataRow = rows.filter(function(tr){\r\n                return !tr.hasClass('ng-table-group');\r\n            })[0];\r\n            groupRow = rows.filter(function(tr){\r\n                return tr.hasClass('ng-table-group');\r\n            })[0];\r\n\r\n            if (!dataRow) {\r\n                return undefined;\r\n            }\r\n\t\t\t\r\n\t\t\t// Accessibility: row.children() caters for both <td> and <th> in rows of <tbody>\r\n\t\t\tng1.forEach(dataRow.children(), function(item) {\r\n                var el = ng1.element(item);\r\n                if (el.attr('ignore-cell') && 'true' === el.attr('ignore-cell')) {\r\n                    return;\r\n                }\r\n\r\n                var getAttrValue = function(attr: string){\r\n                    return el.attr('x-data-' + attr) || el.attr('data-' + attr) || el.attr(attr);\r\n                };\r\n                var setAttrValue = function(attr: string, value: string){\r\n                    if (el.attr('x-data-' + attr)){\r\n                        el.attr('x-data-' + attr, value)\r\n                    } else if (el.attr('data' + attr)){\r\n                        el.attr('data' + attr, value)\r\n                    } else {\r\n                        el.attr(attr, value)\r\n                    }\r\n                };\r\n\r\n                var parsedAttribute = function<T>(attr: string): IColumnField<T> {\r\n                    var expr = getAttrValue(attr);\r\n                    if (!expr){\r\n                        return undefined;\r\n                    }\r\n\r\n                    var localValue: any;\r\n                    var getter = function (context: ColumnFieldContext) {\r\n                        if (localValue !== undefined){\r\n                            return localValue as T;\r\n                        }\r\n                        return $parse(expr)(context) as T;\r\n                    };\r\n                    (getter as any).assign = function($scope: ColumnFieldContext, value: any){\r\n                        var parsedExpr = $parse(expr);\r\n                        if (parsedExpr.assign) {\r\n                            // we should be writing back to the parent scope as this is where the expression\r\n                            // came from\r\n                            parsedExpr.assign($scope.$parent, value);\r\n                        } else {\r\n                            localValue = value;\r\n                        }\r\n                    };\r\n                    return getter as IColumnField<T>;\r\n                };\r\n                var titleExpr = getAttrValue('title-alt') || getAttrValue('title');\r\n                if (titleExpr){\r\n                    el.attr('data-title-text', '{{' + titleExpr + '}}'); // this used in responsive table\r\n                }\r\n                // NOTE TO MAINTAINERS: if you add extra fields to a $column be sure to extend ngTableColumn with\r\n                // a corresponding \"safe\" default\r\n                columns.push({\r\n                    id: i++,\r\n                    title: parsedAttribute<string>('title'),\r\n                    titleAlt: parsedAttribute<string>('title-alt'),\r\n                    headerTitle: parsedAttribute<string>('header-title'),\r\n                    sortable: parsedAttribute<string | boolean>('sortable'),\r\n                    'class': parsedAttribute<string>('header-class'),\r\n                    filter: parsedAttribute<IFilterTemplateDefMap>('filter'),\r\n                    groupable: parsedAttribute<string | boolean>('groupable'),\r\n                    headerTemplateURL: parsedAttribute<string | boolean>('header'),\r\n                    filterData: parsedAttribute<IPromise<SelectData> | SelectData>('filter-data'),\r\n                    show: el.attr(\"ng-if\") ? parsedAttribute<boolean>('ng-if') : undefined\r\n                });\r\n\r\n                if (groupRow || el.attr(\"ng-if\")){\r\n                    // change ng-if to bind to our column definition which we know will be writable\r\n                    // because this will potentially increase the $watch count, only do so if we already have an\r\n                    // ng-if or when we definitely need to change visibility of the columns.\r\n                    // currently only ngTableGroupRow directive needs to change visibility\r\n                    setAttrValue('ng-if', '$columns[' + (columns.length - 1) + '].show(this)');\r\n                }\r\n            });\r\n\t\t\t            \r\n            return function(scope: IScope & IScopeExtensions, element: IAugmentedJQuery, attrs: ITableInputAttributes, controller: ITableController) {\r\n                scope.$columns = columns = controller.buildColumns(columns);\r\n\r\n                controller.setupBindingsToInternalScope(attrs.ngTable);\r\n                controller.loadFilterData(columns);\r\n                controller.compileDirectiveTemplates();\r\n            };\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTable.directive.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport { IScope } from 'angular';\r\nimport * as ng1 from 'angular';\r\nimport { IColumnDef, IDynamicTableColDef } from './public-interfaces';\r\n\r\n/**\r\n * @private\r\n * Definition of the service used to construct a table $column used by {@link ngTable ngTable} directive\r\n */\r\nexport interface IColumnBuilder {\r\n    /**\r\n     * Creates a $column for use within a header template\r\n     *\r\n     * @param column the initial definition for $column to build\r\n     * @param defaultScope the $scope to supply to the $column getter methods when not supplied by caller\r\n     * @param columns a reference to the $columns array to make available on the context supplied to the\r\n     * $column getter methods\r\n     */\r\n    buildColumn(column: IColumnDef | IDynamicTableColDef, defaultScope: IScope, columns: Array<IColumnDef | IDynamicTableColDef>): IColumnDef | IDynamicTableColDef\r\n}\r\n\r\nngTableColumn.$inject = [];\r\n\r\n/**\r\n * @private\r\n * Service to construct a $column definition used by {@link ngTable ngTable} directive\r\n */\r\nexport function ngTableColumn(): IColumnBuilder {\r\n\r\n    return {\r\n        buildColumn: buildColumn\r\n    };\r\n\r\n    //////////////\r\n\r\n    function buildColumn(column: IColumnDef | IDynamicTableColDef, defaultScope: IScope, columns: IColumnDef[]): IColumnDef | IDynamicTableColDef {\r\n        // note: we're not modifying the original column object. This helps to avoid unintended side affects\r\n        var extendedCol = Object.create(column);\r\n        var defaults = createDefaults();\r\n        for (var prop in defaults) {\r\n            if (extendedCol[prop] === undefined) {\r\n                extendedCol[prop] = defaults[prop];\r\n            }\r\n            if(!ng1.isFunction(extendedCol[prop])){\r\n                // wrap raw field values with \"getter\" functions\r\n                // - this is to ensure consistency with how ngTable.compile builds columns\r\n                // - note that the original column object is being \"proxied\"; this is important\r\n                //   as it ensure that any changes to the original object will be returned by the \"getter\"\r\n                (function(prop1: string){\r\n                    var getterSetter = function getterSetter(/*[value] || [$scope, locals]*/) {\r\n                        if (arguments.length === 1 && !isScopeLike(arguments[0])) {\r\n                            (getterSetter as any).assign(null, arguments[0]);\r\n                        } else {\r\n                            return column[prop1];\r\n                        }\r\n                    };\r\n                    (getterSetter as any).assign = function($scope: IScope, value: any){\r\n                        column[prop1] = value;\r\n                    };\r\n                    extendedCol[prop1] = getterSetter;\r\n                })(prop);\r\n            }\r\n            (function(prop1: string){\r\n                // satisfy the arguments expected by the function returned by parsedAttribute in the ngTable directive\r\n                var getterFn = extendedCol[prop1];\r\n                extendedCol[prop1] = function () {\r\n                    if (arguments.length === 1 && !isScopeLike(arguments[0])){\r\n                        getterFn.assign(null, arguments[0]);\r\n                    } else {\r\n                        var scope = arguments[0] || defaultScope;\r\n                        var context = Object.create(scope);\r\n                        ng1.extend(context, {\r\n                            $column: extendedCol,\r\n                            $columns: columns\r\n                        });\r\n                        return getterFn.call(column, context);\r\n                    }\r\n                };\r\n                if (getterFn.assign){\r\n                    extendedCol[prop1].assign = getterFn.assign;\r\n                }\r\n            })(prop);\r\n        }\r\n        return extendedCol;\r\n    }\r\n\r\n    function createDefaults(){\r\n        return {\r\n            'class': createGetterSetter(''),\r\n            filter: createGetterSetter(false),\r\n            groupable: createGetterSetter(false),\r\n            filterData: ng1.noop,\r\n            headerTemplateURL: createGetterSetter(false),\r\n            headerTitle: createGetterSetter(''),\r\n            sortable: createGetterSetter(false),\r\n            show: createGetterSetter(true),\r\n            title: createGetterSetter(''),\r\n            titleAlt: createGetterSetter('')\r\n        };\r\n    }\r\n\r\n    function createGetterSetter(initialValue: any){\r\n        var value = initialValue;\r\n        var getterSetter = function getterSetter(/*[value] || [$scope, locals]*/){\r\n            if (arguments.length === 1 && !isScopeLike(arguments[0])) {\r\n                (getterSetter as any).assign(null, arguments[0]);\r\n            } else {\r\n                return value;\r\n            }\r\n        };\r\n        (getterSetter as any).assign = function($scope: IScope, newValue: any){\r\n            value = newValue;\r\n        };\r\n        return getterSetter;\r\n    }\r\n\r\n    function isScopeLike(object: any){\r\n        return object != null && ng1.isFunction(object.$new);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableColumn.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport { IAugmentedJQuery, IAttributes, IDirective, IParseService } from 'angular';\r\nimport { ITableScope } from './ngTableController';\r\nimport { IColumnDef } from './public-interfaces';\r\n\r\n/**\r\n * @private\r\n */\r\ninterface IInputAttributes extends IAttributes {\r\n    ngTableColumnsBinding: string;\r\n}\r\n\r\nngTableColumnsBinding.$inject = [\"$parse\"];\r\n\r\n/**\r\n * One-way data binds the $columns array generated by ngTable/ngTableDynamic to the specified\r\n * expression.\r\n * This allows the $columns array created for the table to be accessed outside of the html table\r\n * markup.\r\n * \r\n * @ngdoc directive\r\n * \r\n * @example\r\n * ```html\r\n * <table ng-table=\"$ctrl.tableParams\" class=\"table\" ng-table-columns-binding=\"$ctlr.tableColumns\">\r\n * ```\r\n */\r\nexport function ngTableColumnsBinding<T>($parse: IParseService) : IDirective {\r\n    var directive = {\r\n        restrict: 'A',\r\n        require: 'ngTable',\r\n        link: linkFn\r\n    };\r\n    return directive;\r\n\r\n    function linkFn($scope: ITableScope<T>, $element: IAugmentedJQuery, $attrs: IInputAttributes){\r\n        var setter = $parse($attrs.ngTableColumnsBinding).assign;\r\n        if (setter){\r\n            $scope.$watch<IColumnDef[]>('$columns', function(newColumns){\r\n                var shallowClone = (newColumns || []).slice(0);\r\n                setter($scope, shallowClone);\r\n            });\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableColumnsBinding.directive.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport { \r\n    IAttributes, IAugmentedJQuery, ICompileService, IDocumentService, IParseService, IPromise, IScope, \r\n    ITimeoutService \r\n} from 'angular';\r\nimport * as ng1 from 'angular';\r\nimport { \r\n    DataResult, DataResults, IDataRowGroup, GroupedDataResults, INgTableParams, IEventsChannel, \r\n    IPageButton, ITableParamsConstructor \r\n} from '../core';\r\nimport { IColumnDef, IDynamicTableColDef, SelectData, ITableInputAttributes } from './public-interfaces';\r\nimport { IColumnBuilder } from './ngTableColumn';\r\n\r\n/**\r\n * @private\r\n */\r\nexport interface ITableScope<T> extends IScope {\r\n    $columns: IColumnDef[];\r\n    $loading: boolean;\r\n    $filterRow: {\r\n        disabled: boolean;\r\n    };\r\n    $data?: DataResults<T>;\r\n    $groups?: GroupedDataResults<T>;\r\n    $groupRow: {\r\n        show: boolean;\r\n    };\r\n    show_filter: boolean;\r\n    pages: IPageButton[];\r\n    templates: {\r\n        header: string;\r\n        pagination: string;\r\n    },\r\n    params: INgTableParams<T>\r\n}\r\n\r\nngTableController.$inject = [\r\n    '$scope', 'NgTableParams', '$timeout', '$parse', '$compile', '$attrs', '$element', '$document', 'ngTableColumn', 'ngTableEventsChannel'\r\n];\r\n\r\n/**\r\n * The controller for the {@link ngTable ngTable} and {@link ngTableDynamic ngTableDynamic} directives\r\n */\r\nexport function ngTableController<T>(\r\n    $scope: ITableScope<T>, NgTableParams: ITableParamsConstructor<T>, $timeout: ITimeoutService, $parse: IParseService,\r\n    $compile: ICompileService, $attrs: IAttributes & ITableInputAttributes, $element: IAugmentedJQuery, $document: IDocumentService,\r\n    ngTableColumn: IColumnBuilder, ngTableEventsChannel: IEventsChannel) {\r\n    var isFirstTimeLoad = true;\r\n    $scope.$filterRow = { disabled: false };\r\n    $scope.$loading = false;\r\n\r\n    // until such times as the directive uses an isolated scope, we need to ensure that the check for\r\n    // the params field only consults the \"own properties\" of the $scope. This is to avoid seeing the params\r\n    // field on a $scope higher up in the prototype chain\r\n    if (!$scope.hasOwnProperty(\"params\")) {\r\n        $scope.params = new NgTableParams(true);\r\n    }\r\n\r\n    var delayFilter = (function () {\r\n        var timer: IPromise<any>;\r\n        return function (callback: (...args: any[]) => void, ms: number) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(callback, ms);\r\n        };\r\n    })();\r\n\r\n    function onDataReloadStatusChange(newStatus: boolean/*, oldStatus*/) {\r\n        if (!newStatus || $scope.params.hasErrorState()) {\r\n            return;\r\n        }\r\n\r\n        var currentParams = $scope.params;\r\n        var filterOptions = currentParams.settings().filterOptions;\r\n\r\n        if (currentParams.hasFilterChanges()) {\r\n            var applyFilter = function () {\r\n                currentParams.page(1);\r\n                currentParams.reload();\r\n            };\r\n            if (filterOptions.filterDelay) {\r\n                delayFilter(applyFilter, filterOptions.filterDelay);\r\n            } else {\r\n                applyFilter();\r\n            }\r\n        } else {\r\n            currentParams.reload();\r\n        }\r\n    }\r\n\r\n    // watch for when a new NgTableParams is bound to the scope\r\n    // CRITICAL: the watch must be for reference and NOT value equality; this is because NgTableParams maintains\r\n    // the current data page as a field. Checking this for value equality would be terrible for performance\r\n    // and potentially cause an error if the items in that array has circular references\r\n    $scope.$watch<INgTableParams<T>>('params', (newParams, oldParams) => {\r\n        if (newParams === oldParams || !newParams) {\r\n            return;\r\n        }\r\n\r\n        newParams.reload();\r\n    }, false);\r\n\r\n    $scope.$watch('params.isDataReloadRequired()', onDataReloadStatusChange);\r\n\r\n    this.compileDirectiveTemplates = function () {\r\n        if (!$element.hasClass('ng-table')) {\r\n            $scope.templates = {\r\n                header: ($attrs.templateHeader ? $attrs.templateHeader : 'ng-table/header.html'),\r\n                pagination: ($attrs.templatePagination ? $attrs.templatePagination : 'ng-table/pager.html')\r\n            };\r\n            $element.addClass('ng-table');\r\n            var headerTemplate: IAugmentedJQuery = null;\r\n\r\n            // $element.find('> thead').length === 0 doesn't work on jqlite\r\n            var theadFound = false;\r\n            ng1.forEach($element.children(), function (e) {\r\n                if (e.tagName === 'THEAD') {\r\n                    theadFound = true;\r\n                }\r\n            });\r\n            if (!theadFound) {\r\n                headerTemplate = ng1.element('<thead ng-include=\"templates.header\"></thead>', $document);\r\n                $element.prepend(headerTemplate);\r\n            }\r\n            var paginationTemplate = ng1.element(\r\n                '<div ng-table-pagination=\"params\" template-url=\"templates.pagination\"></div>',\r\n                $document\r\n            );\r\n            $element.after(paginationTemplate);\r\n            if (headerTemplate) {\r\n                $compile(headerTemplate)($scope);\r\n            }\r\n            $compile(paginationTemplate)($scope);\r\n        }\r\n    };\r\n\r\n    this.loadFilterData = function ($columns: IColumnDef[]) {\r\n        ng1.forEach($columns, function ($column) {\r\n            var result = $column.filterData($scope);\r\n            if (!result) {\r\n                delete $column.filterData;\r\n                return undefined;\r\n            }\r\n\r\n            if (isPromiseLike(result)) {\r\n                delete $column.filterData;\r\n                return result.then(function (data) {\r\n                    // our deferred can eventually return arrays, functions and objects\r\n                    if (!ng1.isArray(data) && !ng1.isFunction(data) && !ng1.isObject(data)) {\r\n                        // if none of the above was found - we just want an empty array\r\n                        data = [];\r\n                    }\r\n                    $column.data = data;\r\n                });\r\n            }\r\n            // otherwise, we just return what the user gave us. It could be a function, array, object, whatever\r\n            else {\r\n                return $column.data = result;\r\n            }\r\n        });\r\n\r\n        function isPromiseLike(val: any): val is IPromise<SelectData> {\r\n            return val && typeof val === 'object' && typeof val.then === 'function';\r\n        }\r\n    };\r\n\r\n    this.buildColumns = function (columns: Array<IColumnDef | IDynamicTableColDef>) {\r\n        var result: Array<IColumnDef | IDynamicTableColDef> = [];\r\n        (columns || []).forEach(function (col) {\r\n            result.push(ngTableColumn.buildColumn(col, $scope, result));\r\n        });\r\n        return result\r\n    };\r\n\r\n    this.parseNgTableDynamicExpr = function (attr: string) {\r\n        if (!attr || attr.indexOf(\" with \") > -1) {\r\n            var parts = attr.split(/\\s+with\\s+/);\r\n            return {\r\n                tableParams: parts[0],\r\n                columns: parts[1]\r\n            };\r\n        } else {\r\n            throw new Error('Parse error (expected example: ng-table-dynamic=\\'tableParams with cols\\')');\r\n        }\r\n    };\r\n\r\n    this.setupBindingsToInternalScope = function (tableParamsExpr: string) {\r\n\r\n        // note: this we're setting up watches to simulate angular's isolated scope bindings\r\n\r\n        // note: is REALLY important to watch for a change to the ngTableParams *reference* rather than\r\n        // $watch for value equivalence. This is because ngTableParams references the current page of data as\r\n        // a field and it's important not to watch this\r\n        $scope.$watch<INgTableParams<T>>(tableParamsExpr, function (params) {\r\n            if (params === undefined) {\r\n                return;\r\n            }\r\n            $scope.params = params;\r\n        }, false);\r\n\r\n        setupFilterRowBindingsToInternalScope();\r\n        setupGroupRowBindingsToInternalScope();\r\n    };\r\n\r\n    function setupFilterRowBindingsToInternalScope() {\r\n        if ($attrs.showFilter) {\r\n            $scope.$parent.$watch<boolean>($attrs.showFilter, function (value) {\r\n                $scope.show_filter = value;\r\n            });\r\n        } else {\r\n            $scope.$watch(hasVisibleFilterColumn, function (value) {\r\n                $scope.show_filter = value;\r\n            })\r\n        }\r\n\r\n        if ($attrs.disableFilter) {\r\n            $scope.$parent.$watch<boolean>($attrs.disableFilter, function (value) {\r\n                $scope.$filterRow.disabled = value;\r\n            });\r\n        }\r\n    }\r\n\r\n    function setupGroupRowBindingsToInternalScope() {\r\n        $scope.$groupRow = { show: false };\r\n        if ($attrs.showGroup) {\r\n            var showGroupGetter = $parse($attrs.showGroup);\r\n            $scope.$parent.$watch<boolean>(showGroupGetter, function (value) {\r\n                $scope.$groupRow.show = value;\r\n            });\r\n            if (showGroupGetter.assign) {\r\n                // setup two-way databinding thus allowing ngTableGrowRow to assign to the showGroup expression\r\n                $scope.$watch<boolean>('$groupRow.show', function (value) {\r\n                    showGroupGetter.assign($scope.$parent, value);\r\n                });\r\n            }\r\n        } else {\r\n            $scope.$watch<boolean>('params.hasGroup()', function (newValue) {\r\n                $scope.$groupRow.show = newValue;\r\n            });\r\n        }\r\n    }\r\n\r\n    function getVisibleColumns() {\r\n        return ($scope.$columns || []).filter(function (c) {\r\n            return c.show($scope);\r\n        });\r\n    }\r\n\r\n    function hasVisibleFilterColumn() {\r\n        if (!$scope.$columns) return false;\r\n\r\n        return some($scope.$columns, function ($column) {\r\n            return $column.show($scope) && !!$column.filter($scope);\r\n        });\r\n    }\r\n\r\n    function some<T>(array: T[], predicate: (item: T) => boolean) {\r\n        var found = false;\r\n        for (var i = 0; i < array.length; i++) {\r\n            var obj = array[i];\r\n            if (predicate(obj)) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    function commonInit() {\r\n        ngTableEventsChannel.onAfterReloadData<T>(\r\n            (params, newDatapage) => {\r\n                var visibleColumns = getVisibleColumns();\r\n                if (params.hasGroup()) {\r\n                    $scope.$groups = (newDatapage || []) as GroupedDataResults<T>;\r\n                    $scope.$groups.visibleColumnCount = visibleColumns.length;\r\n                } else {\r\n                    $scope.$data = (newDatapage || []) as DataResults<T>;\r\n                    $scope.$data.visibleColumnCount = visibleColumns.length;\r\n                }\r\n            },\r\n            $scope,\r\n            (publisher) => $scope.params === publisher\r\n        );\r\n\r\n        ngTableEventsChannel.onPagesChanged<T>(\r\n            (params, newPages) => {\r\n                $scope.pages = newPages;\r\n                $timeout(function () {\r\n                    if(document.activeElement === null){\r\n                        $element[0].focus();\r\n                    }\r\n                });\r\n            },\r\n            $scope,\r\n            (publisher) => $scope.params === publisher\r\n        );\r\n    }\r\n\r\n    commonInit();\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableController.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport { IAugmentedJQuery, IDirective, IScope } from 'angular';\r\nimport * as ng1 from 'angular';\r\nimport { IColumnDef, IDynamicTableColDef, ITableController, ITableInputAttributes } from './public-interfaces';\r\n\r\ninterface IScopeExtensions {\r\n    $columns: IColumnDef[]\r\n}\r\n\r\nngTableDynamic.$inject = [];\r\n\r\n/**\r\n * A dynamic version of the {@link ngTable ngTable} directive that accepts a dynamic list of columns\r\n * definitions to render\r\n * @ngdoc directive\r\n *\r\n * @example\r\n * ```html\r\n * <table ng-table-dynamic=\"$ctrl.tableParams with $ctrl.cols\" class=\"table\">\r\n *  <tr ng-repeat=\"row in $data\">\r\n *    <td ng-repeat=\"col in $columns\">{{row[col.field]}}</td>\r\n *  </tr>\r\n * </table>\r\n * ```\r\n */\r\nexport function ngTableDynamic () : IDirective{\r\n\r\n    return {\r\n        restrict: 'A',\r\n        priority: 1001,\r\n        scope: true,\r\n        controller: 'ngTableController',\r\n        compile: function(tElement: IAugmentedJQuery) {\r\n            var row: IAugmentedJQuery;\r\n\r\n            // IE 8 fix :not(.ng-table-group) selector\r\n            ng1.forEach(tElement.find('tr'), function(tr) {\r\n                tr = ng1.element(tr);\r\n                if (!tr.hasClass('ng-table-group') && !row) {\r\n                    row = tr;\r\n                }\r\n            });\r\n            if (!row) {\r\n                return undefined;\r\n            }\r\n\r\n            ng1.forEach(row.find('td'), function(item) {\r\n                var el = ng1.element(item);\r\n                var getAttrValue = function(attr: string){\r\n                    return el.attr('x-data-' + attr) || el.attr('data-' + attr) || el.attr(attr);\r\n                };\r\n\r\n                // this used in responsive table\r\n                var titleExpr = getAttrValue('title');\r\n                if (!titleExpr){\r\n                    el.attr('data-title-text', '{{$columns[$index].titleAlt(this) || $columns[$index].title(this)}}');\r\n                }\r\n                var showExpr = el.attr('ng-if');\r\n                if (!showExpr){\r\n                    el.attr('ng-if', '$columns[$index].show(this)');\r\n                }\r\n            });\r\n            return function (scope: IScope & IScopeExtensions, element: IAugmentedJQuery, attrs: ITableInputAttributes, controller: ITableController) {\r\n                var expr = controller.parseNgTableDynamicExpr(attrs.ngTableDynamic);\r\n\r\n                controller.setupBindingsToInternalScope(expr.tableParams);\r\n                controller.compileDirectiveTemplates();\r\n\r\n                scope.$watchCollection<IDynamicTableColDef[]>(expr.columns, function (newCols/*, oldCols*/) {\r\n                    scope.$columns = controller.buildColumns(newCols);\r\n                    controller.loadFilterData(scope.$columns);\r\n                });\r\n            };\r\n        }\r\n    };\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableDynamic.directive.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport * as ng1 from 'angular';\r\nimport { IFilterConfig, IFilterConfigValues, IFilterTemplateDef } from './public-interfaces';\r\n\r\nngTableFilterConfigProvider.$inject = [];\r\n\r\n/**\r\n * The angular provider used to configure the behaviour of the `ngTableFilterConfig` service.\r\n * \r\n * Implements the {@link IFilterConfigProvider IFilterConfigProvider} interface\r\n */\r\nexport function ngTableFilterConfigProvider() {\r\n    var config: IFilterConfigValues;\r\n    var defaultConfig: IFilterConfigValues = {\r\n        defaultBaseUrl: 'ng-table/filters/',\r\n        defaultExt: '.html',\r\n        aliasUrls: {}\r\n    };\r\n\r\n    this.$get = ngTableFilterConfig;\r\n    this.resetConfigs = resetConfigs;\r\n    this.setConfig = setConfig;\r\n\r\n    init();\r\n\r\n    /////////\r\n\r\n    function init(){\r\n        resetConfigs();\r\n    }\r\n\r\n    function resetConfigs(){\r\n        config = defaultConfig;\r\n    }\r\n\r\n    function setConfig(customConfig: IFilterConfigValues){\r\n        var mergeConfig = ng1.extend({}, config, customConfig);\r\n        mergeConfig.aliasUrls = ng1.extend({}, config.aliasUrls, customConfig.aliasUrls);\r\n        config = mergeConfig;\r\n    }\r\n\r\n    /////////\r\n\r\n    ngTableFilterConfig.$inject = [];\r\n\r\n    function ngTableFilterConfig(): IFilterConfig {\r\n\r\n        var publicConfig: IFilterConfigValues;\r\n\r\n        var service = {\r\n            config: publicConfig,\r\n            getTemplateUrl: getTemplateUrl,\r\n            getUrlForAlias: getUrlForAlias\r\n        };\r\n        Object.defineProperty(service, \"config\", {\r\n            get: function(){\r\n                return publicConfig = publicConfig || ng1.copy(config);\r\n            },\r\n            enumerable: true\r\n        });\r\n\r\n        return service;\r\n\r\n        /////////\r\n\r\n        function getTemplateUrl(filterDef: string | IFilterTemplateDef, filterKey?: string){\r\n            var filterName: string;\r\n            if (typeof filterDef !== 'string'){\r\n                filterName = filterDef.id;\r\n            } else {\r\n                filterName = filterDef;\r\n            }\r\n            if (filterName.indexOf('/') !== -1){\r\n                return filterName;\r\n            }\r\n\r\n            return service.getUrlForAlias(filterName, filterKey);\r\n        }\r\n\r\n        function getUrlForAlias(aliasName: string, filterKey?: string){\r\n            return config.aliasUrls[aliasName] || config.defaultBaseUrl + aliasName + config.defaultExt;\r\n        }\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableFilterConfig.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nvar templateUrl = require('./filterRow.html');\r\n\r\nngTableFilterRow.$inject = [];\r\n\r\n/**\r\n * directive that renders the filter header row for a table \r\n * @ngdoc directive\r\n * @example\r\n * ```html\r\n * <ng-table-filter-row></ng-table-filter-row>\r\n * ```\r\n */\r\nexport function ngTableFilterRow(){\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: templateUrl,\r\n        scope: true,\r\n        controller: 'ngTableFilterRowController'\r\n    };\r\n    return directive;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableFilterRow.directive.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport { IScope } from 'angular';\r\nimport { IFilterConfig, IFilterTemplateDef, IFilterTemplateDefMap } from './public-interfaces';\r\n\r\n/**\r\n * @private\r\n */\r\nexport interface IScopeExtensions {\r\n    config: IFilterConfig;\r\n    getFilterCellCss(filter: IFilterTemplateDefMap, layout: string): string;\r\n    getFilterPlaceholderValue(filterDef: string | IFilterTemplateDef, filterKey?: string): string;\r\n}\r\n\r\nngTableFilterRowController.$inject = ['$scope', 'ngTableFilterConfig'];\r\n\r\n/**\r\n * Controller for the {@link ngTableFilterRow ngTableFilterRow} directive\r\n */\r\nexport function ngTableFilterRowController($scope: IScope & IScopeExtensions, ngTableFilterConfig: IFilterConfig){\r\n\r\n    $scope.config = ngTableFilterConfig;\r\n\r\n    $scope.getFilterCellCss = function (filter: IFilterTemplateDefMap, layout: string) {\r\n        if (layout !== 'horizontal') {\r\n            return 's12';\r\n        }\r\n\r\n        var size = Object.keys(filter).length;\r\n        var width = parseInt((12 / size).toString(), 10);\r\n        return 's' + width;\r\n    };\r\n\r\n    $scope.getFilterPlaceholderValue = function(filterDef: string | IFilterTemplateDef, filterKey?: string){\r\n        if (typeof filterDef === 'string') {\r\n            return '';\r\n        } else {\r\n            return filterDef.placeholder;\r\n        }\r\n    };\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableFilterRowController.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nvar templateUrl = require('./groupRow.html');\r\n\r\nngTableGroupRow.$inject = [];\r\n\r\n/**\r\n * directive that renders the group header row for a table \r\n * @ngdoc directive\r\n * @example\r\n * ```html\r\n * <ng-table-group-row></ng-table-group-row>\r\n * ```\r\n */\r\nexport function ngTableGroupRow(){\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: templateUrl,\r\n        scope: true,\r\n        controller: 'ngTableGroupRowController',\r\n        controllerAs: 'dctrl'\r\n    };\r\n    return directive;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableGroupRow.directive.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport { IPromise } from 'angular';\r\nimport { DataResult, IGroupingFunc, Grouping } from '../core';\r\nimport { IColumnDef } from './public-interfaces';\r\nimport { ITableScope } from './ngTableController';\r\n\r\n/**\r\n * @private\r\n */\r\nexport interface IScopeExtensions<T> {\r\n    $selGroup: IGroupingFunc<any> | string;\r\n    $selGroupTitle: string;\r\n    getGroupables(): Array<IGroupingFunc<any> | IColumnDef>\r\n    getGroupTitle(group: IGroupingFunc<any> | IColumnDef): string;\r\n    getVisibleColumns(): IColumnDef[];\r\n    groupBy(group: IGroupingFunc<any> | IColumnDef): void;\r\n    isSelectedGroup(group: IGroupingFunc<any> | IColumnDef): boolean;\r\n    toggleDetail(): IPromise<Array<DataResult<T>>>\r\n}\r\n\r\nngTableGroupRowController.$inject = ['$scope'];\r\n\r\n/**\r\n * Controller for the {@link ngTableGroupRow ngTableGroupRow} directive\r\n */\r\nexport function ngTableGroupRowController<T>($scope: ITableScope<T> & IScopeExtensions<T>){\r\n\r\n    var groupFns: Array<IGroupingFunc<any> | IColumnDef> = [];\r\n\r\n    init();\r\n\r\n    function init(){\r\n        $scope.getGroupables = getGroupables;\r\n        $scope.getGroupTitle = getGroupTitle;\r\n        $scope.getVisibleColumns = getVisibleColumns;\r\n        $scope.groupBy = groupBy;\r\n        $scope.isSelectedGroup = isSelectedGroup;\r\n        $scope.toggleDetail = toggleDetail;\r\n\r\n        $scope.$watch('params.group()', setGroup, true);\r\n    }\r\n\r\n    function changeSortDirection(){\r\n        var newDirection: string;\r\n        if ($scope.params.hasGroup($scope.$selGroup, 'asc')) {\r\n            newDirection = 'desc';\r\n        } else if ($scope.params.hasGroup($scope.$selGroup, 'desc')){\r\n            newDirection = '';\r\n        } else {\r\n            newDirection = 'asc';\r\n        }\r\n        $scope.params.group($scope.$selGroup, newDirection);\r\n    }\r\n\r\n    function findGroupColumn(groupKey: IGroupingFunc<any> | string) {\r\n        return $scope.$columns.filter(function ($column) {\r\n            return $column.groupable($scope) === groupKey;\r\n        })[0];\r\n    }\r\n\r\n    function getGroupTitle(group: IGroupingFunc<any> | IColumnDef){\r\n        return isGroupingFunc(group) ? group.title : group.title($scope);\r\n    }\r\n\r\n    function getGroupables(){\r\n        var groupableCols = $scope.$columns.filter(function ($column) {\r\n            return !!$column.groupable($scope);\r\n        });\r\n        return groupFns.concat(groupableCols);\r\n    }\r\n\r\n    function getVisibleColumns(){\r\n        return $scope.$columns.filter(function($column){\r\n            return $column.show($scope);\r\n        })\r\n    }\r\n\r\n    function groupBy(group: IGroupingFunc<any> | IColumnDef){\r\n        if (isSelectedGroup(group)){\r\n            changeSortDirection();\r\n        } else {\r\n            if (isGroupingFunc(group)){\r\n                $scope.params.group(group);\r\n            } else{\r\n                // it's OK, we know that groupable will return a string\r\n                // this is guaranteed by getGroupables returning only\r\n                // columns that return (truthy) strings\r\n                $scope.params.group(group.groupable($scope) as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    function isGroupingFunc(val: IColumnDef | Grouping<any>): val is IGroupingFunc<any> {\r\n        return typeof val === 'function';\r\n    }\r\n\r\n    function isSelectedGroup(group: IGroupingFunc<any> | IColumnDef){\r\n        if (isGroupingFunc(group)){\r\n            return group === $scope.$selGroup;\r\n        } else {\r\n            return group.groupable($scope) === $scope.$selGroup;\r\n        }\r\n    }\r\n\r\n    function setGroup(grouping: Grouping<any>){\r\n        var existingGroupCol = findGroupColumn($scope.$selGroup);\r\n        if (existingGroupCol && existingGroupCol.show.assign){\r\n            existingGroupCol.show.assign($scope, true);\r\n        }\r\n        if (isGroupingFunc(grouping)) {\r\n            groupFns = [grouping];\r\n            $scope.$selGroup = grouping;\r\n            $scope.$selGroupTitle = grouping.title;\r\n        } else {\r\n            // note: currently only one group is implemented\r\n            var groupKey = Object.keys(grouping || {})[0];\r\n            var groupedColumn = findGroupColumn(groupKey);\r\n            if (groupedColumn) {\r\n                $scope.$selGroupTitle = groupedColumn.title($scope);\r\n                $scope.$selGroup = groupKey;\r\n                if (groupedColumn.show.assign) {\r\n                    groupedColumn.show.assign($scope, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleDetail(){\r\n        $scope.params.settings().groupOptions.isExpanded = !$scope.params.settings().groupOptions.isExpanded;\r\n        return $scope.params.reload();\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableGroupRowController.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport * as ng1 from 'angular';\r\nimport { IEventsChannel, IPageButton } from '../core'\r\nimport { ITableScope } from './ngTableController';\r\n\r\ninterface IScopeExtensions {\r\n    pages: IPageButton[]\r\n}\r\n\r\nngTablePagination.$inject = ['$compile', '$document', 'ngTableEventsChannel'];\r\n\r\n/**\r\n * Directive that renders the table pagination controls\r\n * @ngdoc directive\r\n */\r\nexport function ngTablePagination<T>($compile: ng1.ICompileService, $document: ng1.IDocumentService, ngTableEventsChannel: IEventsChannel): ng1.IDirective {\r\n\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            'params': '=ngTablePagination',\r\n            'templateUrl': '='\r\n        },\r\n        replace: false,\r\n        link: function(scope: ITableScope<T> & IScopeExtensions, element: ng1.IAugmentedJQuery/*, attrs*/) {\r\n\r\n            ngTableEventsChannel.onAfterReloadData<T>(function(pubParams) {\r\n                scope.pages = pubParams.generatePagesArray();\r\n            }, scope, function(pubParams){\r\n                return pubParams === scope.params;\r\n            });\r\n\r\n            scope.$watch<string>('templateUrl', function(templateUrl) {\r\n                if (templateUrl === undefined) {\r\n                    return;\r\n                }\r\n                var template = ng1.element('<div ng-include=\"templateUrl\"></div>', $document);\r\n                element.append(template);\r\n                $compile(template)(scope);\r\n            });\r\n        }\r\n    };\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTablePagination.directive.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport * as ng1 from 'angular';\r\nimport { IColumnDef, SelectData, ISelectDataFunc, ISelectOption } from './public-interfaces';\r\n\r\ninterface IInputAttributes extends ng1.IAttributes {\r\n    ngTableSelectFilterDs: string;\r\n}\r\n\r\ninterface IScopeExtensions {\r\n    $selectData: ISelectOption[]\r\n}\r\n\r\nngTableSelectFilterDs.$inject = [];\r\n\r\n/**\r\n * Takes the array returned by $column.filterData and makes it available as `$selectData` on the `$scope`.\r\n *\r\n * The resulting `$selectData` array will contain an extra item that is suitable to represent the user\r\n * \"deselecting\" an item from a `<select>` tag\r\n *\r\n * This directive is is focused on providing a datasource to an `ngOptions` directive\r\n * @ngdoc directive\r\n * @private\r\n */\r\nfunction ngTableSelectFilterDs(): ng1.IDirective{\r\n    // note: not using isolated or child scope \"by design\"\r\n    // this is to allow this directive to be combined with other directives that do\r\n\r\n    var directive = {\r\n        restrict: 'A',\r\n        controller: ngTableSelectFilterDsController\r\n    };\r\n    return directive;\r\n}\r\n\r\nngTableSelectFilterDsController.$inject = ['$scope', '$parse', '$attrs', '$q'];\r\nfunction ngTableSelectFilterDsController($scope: ng1.IScope & IScopeExtensions, $parse: ng1.IParseService, $attrs: IInputAttributes, $q: ng1.IQService){\r\n\r\n    var $column: IColumnDef;\r\n    init();\r\n\r\n    function init(){\r\n        $column = $parse($attrs.ngTableSelectFilterDs)($scope);\r\n        $scope.$watch<SelectData>(function(){\r\n            return $column && $column.data;\r\n        }, bindDataSource);\r\n    }\r\n\r\n    function bindDataSource(){\r\n        getSelectListData($column).then(function(data){\r\n            if (data && !hasEmptyOption(data)){\r\n                data.unshift({ id: '', title: ''});\r\n            }\r\n            data = data || [];\r\n            $scope.$selectData = data;\r\n        });\r\n    }\r\n\r\n    function hasEmptyOption(data: ISelectOption[]) {\r\n        var isMatch: boolean;\r\n        for (var i = 0; i < data.length; i++) {\r\n            var item = data[i];\r\n            if (item && item.id === '') {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n        return isMatch;\r\n    }\r\n\r\n    function getSelectListData($column: IColumnDef) {\r\n        var dataInput = $column.data;\r\n        if (dataInput instanceof Array) {\r\n            return $q.when(dataInput);\r\n        } else {\r\n            return $q.when(dataInput && dataInput());\r\n        }\r\n    }\r\n}\r\n\r\nexport { ngTableSelectFilterDs };\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableSelectFilterDs.directive.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nvar templateUrl = require('./sorterRow.html');\r\n\r\nngTableSorterRow.$inject = [];\r\n\r\n/**\r\n * directive that renders the sorting header row for a table \r\n * @ngdoc directive\r\n * @example\r\n * ```html\r\n * <ng-table-sorter-row></ng-table-sorter-row>\r\n * ```\r\n */\r\nexport function ngTableSorterRow(){\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: templateUrl,\r\n        scope: true,\r\n        controller: 'ngTableSorterRowController'\r\n    };\r\n    return directive;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableSorterRow.directive.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\nimport { IAngularEvent } from 'angular';\r\nimport { ISortingValues } from '../core';\r\nimport { IColumnDef } from './public-interfaces';\r\nimport { ITableScope } from './ngTableController';\r\n\r\n/**\r\n * @private\r\n */\r\nexport interface IScopeExtensions {\r\n    sortDesc:any;\t\r\n    sortBy($column: IColumnDef, event: IAugmentedMouseEvent): void;\r\n\tresetSortDesc($column: IColumnDef) : void;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport interface IAugmentedMouseEvent extends IAngularEvent {\r\n    ctrlKey: boolean;\r\n    metaKey: boolean;\r\n}\r\n\r\nngTableSorterRowController.$inject = ['$scope'];\r\n\r\n/**\r\n * Controller for the {@link ngTableSorterRow ngTableSorterRow} directive\r\n */\r\nexport function ngTableSorterRowController<T>($scope: ITableScope<T> & IScopeExtensions) {\r\n\r\n    $scope.sortBy = sortBy;\r\n\t$scope.resetSortDesc = resetSortDesc;\r\n    \r\n    ///////////\r\n\r\n    function sortBy($column: IColumnDef, event: IAugmentedMouseEvent) {\r\n\t\tvar parsedSortable = $column.sortable && $column.sortable();\r\n        if (!parsedSortable || typeof parsedSortable !== 'string') {\r\n            return;\r\n        } else {\r\n            var defaultSort = $scope.params.settings().defaultSort;\r\n            var inverseSort = (defaultSort === 'asc' ? 'desc' : 'asc');\r\n            var sorting = $scope.params.sorting() && $scope.params.sorting()[parsedSortable] && ($scope.params.sorting()[parsedSortable] === defaultSort);\r\n            var sortingParams: ISortingValues = (event.ctrlKey || event.metaKey) ? $scope.params.sorting() : {};\r\n            sortingParams[parsedSortable] = (sorting ? inverseSort : defaultSort);\r\n            $scope.params.parameters({\r\n                sorting: sortingParams\r\n            });\r\n\t\t\t\r\n\t\t\t$scope.sortDesc = JSON.parse(JSON.stringify(sortingParams));\r\n\t\t\t\r\n            if(sortingParams[parsedSortable] == 'asc')            \r\n            $scope.sortDesc[parsedSortable] = \"Sort \" + $column.title() + \" in ascending order\";\r\n            else if(sortingParams[parsedSortable] == 'desc')\r\n            $scope.sortDesc[parsedSortable] = \"Sort \" + $column.title() + \" in descending order\";  \t\t\t\t\t\r\n        }\r\n\r\n    }\r\n\t\r\n\tfunction resetSortDesc($column: IColumnDef){\r\n\t\t$scope.sortDesc = {};\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/browser/ngTableSorterRowController.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport * as ng1 from 'angular';\r\nimport { IDefaultGetDataProvider, IDefaultGetData, IFilterFunc, INgTableParams } from './public-interfaces';\r\n\r\n/**\r\n * Allows for the configuration of the ngTableDefaultGetData service.\r\n *\r\n * Set filterFilterName to the name of a angular filter that knows how to apply the values returned by\r\n * `NgTableParams.filter()` to restrict an array of data.\r\n *\r\n * Set sortingFilterName to the name of a angular filter that knows how to apply the values returned by\r\n * `NgTableParams.orderBy()` to sort an array of data.\r\n *\r\n * Out of the box the `ngTableDefaultGetData` service will be configured to use the angular `filter` and `orderBy`\r\n * filters respectively\r\n * \r\n * @ngdoc provider\r\n */\r\nexport class ngTableDefaultGetDataProvider implements IDefaultGetDataProvider {\r\n    filterFilterName = 'filter';\r\n    sortingFilterName = 'orderBy';\r\n    $get: ($filter: ng1.IFilterService) => IDefaultGetData<any>;\r\n    constructor() {\r\n        var provider = this;\r\n        this.$get = ngTableDefaultGetData;\r\n\r\n        ngTableDefaultGetData.$inject = ['$filter'];\r\n\r\n        /**\r\n         * Implementation of the {@link IDefaultGetData IDefaultGetData} interface\r\n         * \r\n         * @ngdoc service\r\n         */\r\n        function ngTableDefaultGetData<T>($filter: ng1.IFilterService): IDefaultGetData<T> {\r\n\r\n            var defaultDataOptions = { applyFilter: true, applySort: true, applyPaging: true };\r\n\r\n            (getData as IDefaultGetData<T>).applyPaging = applyPaging;\r\n            (getData as IDefaultGetData<T>).getFilterFn = getFilterFn;\r\n            (getData as IDefaultGetData<T>).getOrderByFn = getOrderByFn;\r\n\r\n            return getData as IDefaultGetData<T>;\r\n\r\n            function getFilterFn(params: INgTableParams<T>): IFilterFunc<T> {\r\n                var filterOptions = params.settings().filterOptions;\r\n                if (ng1.isFunction(filterOptions.filterFn)) {\r\n                    return filterOptions.filterFn;\r\n                } else {\r\n                    return $filter<ng1.IFilterFilter>(filterOptions.filterFilterName || provider.filterFilterName);\r\n                }\r\n            }\r\n\r\n            function getOrderByFn(params: INgTableParams<T>) {\r\n                return $filter<ng1.IFilterOrderBy>(provider.sortingFilterName);\r\n            }\r\n\r\n            function applyFilter(data: T[], params: INgTableParams<T>): T[] {\r\n                if (!params.hasFilter()) {\r\n                    return data;\r\n                }\r\n\r\n                var filter = params.filter(true);\r\n                var filterKeys = Object.keys(filter);\r\n                var parsedFilter = filterKeys.reduce(function (result, key) {\r\n                    result = setPath(result, filter[key], key);\r\n                    return result;\r\n                }, {});\r\n                var filterFn = getFilterFn(params);\r\n                return filterFn.call(params, data, parsedFilter, params.settings().filterOptions.filterComparator);\r\n            }\r\n\r\n            function applyPaging(data: T[], params: INgTableParams<T>): T[] {\r\n                var pagedData = data.slice((params.page() - 1) * params.count(), params.page() * params.count());\r\n                params.total(data.length); // set total for recalc pagination\r\n                return pagedData;\r\n            }\r\n\r\n            function applySort(data: T[], params: INgTableParams<T>): T[] {\r\n                var orderBy = params.orderBy();\r\n                var orderByFn = getOrderByFn(params);\r\n                return orderBy.length ? orderByFn(data, orderBy) : data;\r\n            }\r\n\r\n            function getData(data: T[], params: INgTableParams<T>): T[] {\r\n                if (data == null) {\r\n                    return [];\r\n                }\r\n\r\n                var options = ng1.extend({}, defaultDataOptions, params.settings().dataOptions);\r\n\r\n                var fData = options.applyFilter ? applyFilter(data, params) : data;\r\n                var orderedData = options.applySort ? applySort(fData, params) : fData;\r\n                return options.applyPaging ? applyPaging(orderedData, params) : orderedData;\r\n            }\r\n\r\n            // Sets the value at any depth in a nested object based on the path\r\n            // note: adapted from: underscore-contrib#setPath\r\n            function setPath(obj: any, value: any, path: string) {\r\n                var keys = path.split('.');\r\n                var ret = obj;\r\n                var lastKey = keys[keys.length - 1];\r\n                var target = ret;\r\n\r\n                var parentPathKeys = keys.slice(0, keys.length - 1);\r\n                parentPathKeys.forEach(function (key) {\r\n                    if (!target.hasOwnProperty(key)) {\r\n                        target[key] = {};\r\n                    }\r\n                    target = target[key];\r\n                });\r\n\r\n                target[lastKey] = value;\r\n                return ret;\r\n            }\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/ngTableDefaultGetData.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport { IDefaults } from './public-interfaces';\r\n\r\n/**\r\n * Default values for ngTable\r\n * @ngdoc object\r\n */\r\nexport var ngTableDefaults : IDefaults = {\r\n    params: {},\r\n    settings: {}\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/core/ngTableDefaults.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport * as ng1 from 'angular';\r\nimport { IEventsChannel, InternalTableParams, INgTableParams } from './public-interfaces';\r\n\r\nngTableEventsChannel.$inject = ['$rootScope'];\r\n\r\n/**\r\n * Implementation of the {@link IEventsChannel IEventsChannel} interface\r\n * @ngdoc service\r\n */\r\nexport function ngTableEventsChannel($rootScope: ng1.IRootScopeService): IEventsChannel {\r\n\r\n    var events = {};\r\n    events = addTableParamsEvent('afterCreated', events);\r\n    events = addTableParamsEvent('afterReloadData', events);\r\n    events = addTableParamsEvent('datasetChanged', events);\r\n    events = addTableParamsEvent('pagesChanged', events);\r\n    return events as IEventsChannel;\r\n\r\n    //////////\r\n\r\n    function addTableParamsEvent(eventName: string, target: {}){\r\n        var fnName = eventName.charAt(0).toUpperCase() + eventName.substring(1);\r\n        var event = {\r\n            ['on' + fnName]: createEventSubscriptionFn(eventName),\r\n            ['publish' + fnName]: createPublishEventFn(eventName)\r\n        };\r\n        return ng1.extend(target, event);\r\n    }\r\n\r\n    type EventSelector = INgTableParams<any>|((publisher: INgTableParams<any>) => boolean);\r\n\r\n    function createEventSubscriptionFn(eventName: string){\r\n        \r\n        return function subscription(\r\n            handler: (...args: any[]) => void, \r\n            eventSelectorOrScope: EventSelector|ng1.IScope, \r\n            eventSelector?: EventSelector) {\r\n\r\n            var actualEvtSelector: (publisher: INgTableParams<any>) => boolean;\r\n            var scope: ng1.IScope = $rootScope;\r\n\r\n            if (isScopeLike(eventSelectorOrScope)) {\r\n                scope = eventSelectorOrScope;\r\n                actualEvtSelector = createEventSelectorFn(eventSelector);\r\n            } else {\r\n                actualEvtSelector = createEventSelectorFn(eventSelectorOrScope);\r\n            }\r\n\r\n            return scope.$on('ngTable:' + eventName, function(event: ng1.IAngularEvent, params: InternalTableParams<any>, ...eventArgs: any[]){\r\n                // don't send events published by the internal NgTableParams created by ngTableController\r\n                if (params.isNullInstance) return;\r\n\r\n                var fnArgs = [params].concat(eventArgs);\r\n                if (actualEvtSelector.apply(this, fnArgs)){\r\n                    handler.apply(this, fnArgs);\r\n                }\r\n            });\r\n        }\r\n\r\n        function createEventSelectorFn(eventSelector: EventSelector): (publisher: INgTableParams<any>) => boolean {\r\n            if (!eventSelector) {\r\n                return (publisher: INgTableParams<any>) => true;\r\n            } else if (isEventSelectorFunc(eventSelector)) {\r\n                return eventSelector\r\n            } else {\r\n                // shorthand for subscriber to only receive events from a specific publisher instance\r\n                return (publisher: INgTableParams<any>) => publisher === eventSelector;\r\n            }\r\n        }\r\n\r\n        function isEventSelectorFunc(val: EventSelector): val is (publisher: INgTableParams<any>) => boolean {\r\n            return typeof val === 'function';\r\n        }\r\n\r\n        function isScopeLike(val: any): val is ng1.IScope {\r\n            return val && typeof val.$new === 'function';\r\n        }\r\n    }\r\n\r\n    function createPublishEventFn(eventName: string){\r\n        return function publish(...args: any[]){\r\n            $rootScope.$broadcast('ngTable:' + eventName, ...args);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/ngTableEventsChannel.ts","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport * as ng1 from 'angular';\r\nimport {\r\n    IDataRowGroup, IDefaults, IDefaultGetData, IEventsChannel, IFilterSettings, IFilterValues, IGetDataFunc, Grouping,\r\n    IGroupValues, IGroupingFunc, IGroupSettings, IPageButton, IParamValues, ISettings, ISortingValues, INgTableParams,\r\n    ITableParamsConstructor\r\n} from './public-interfaces'\r\n\r\nngTableParamsFactory.$inject = [\r\n    '$q', '$log', '$filter', 'ngTableDefaults', 'ngTableDefaultGetData', 'ngTableEventsChannel'\r\n];\r\n\r\n/**\r\n * Implmenentation of the {@link INgTableParams INgTableParams} interface\r\n * @ngdoc service\r\n */\r\nexport function ngTableParamsFactory<T>(\r\n    $q: ng1.IQService, $log: ng1.ILogService, $filter: ng1.IFilterService, ngTableDefaults: IDefaults,\r\n    ngTableDefaultGetData: IDefaultGetData<any>, ngTableEventsChannel: IEventsChannel) {\r\n\r\n    return NgTableParams;\r\n\r\n\r\n    function NgTableParams<T>(baseParameters: IParamValues<T> | boolean, baseSettings: ISettings<T>): INgTableParams<T> {\r\n\r\n        type Memento = {\r\n            params: IParamValues<T>;\r\n            groupSortDirection?: string;\r\n        };\r\n\t\t\r\n\t\tthis.currentPage = \"\";\r\n\t\tthis.focusElement = \"\";\r\n\r\n        function isNumber(n: any) {\r\n            return !isNaN(parseFloat(n)) && isFinite(n);\r\n        }\r\n\r\n        // the ngTableController \"needs\" to create a dummy/null instance and it's important to know whether an instance\r\n        // is one of these\r\n        if (typeof baseParameters === \"boolean\") {\r\n            this.isNullInstance = true;\r\n        }\r\n\r\n        var self: INgTableParams<T> = this,\r\n            prevParamsMemento: Memento,\r\n            errParamsMemento: Memento,\r\n            isCommittedDataset = false,\r\n            initialEvents: Function[] = [],\r\n            log = function (...args: any[]) {\r\n                if (_settings.debugMode && $log.debug) {\r\n                    $log.debug(...args);\r\n                }\r\n            },\r\n            defaultFilterOptions: IFilterSettings<T> = {\r\n                filterComparator: undefined, // look for a substring match in case insensitive way\r\n                filterDelay: 500,\r\n                filterDelayThreshold: 10000, // size of dataset array that will trigger the filterDelay being applied\r\n                filterFilterName: undefined, // when defined overrides ngTableDefaultGetDataProvider.filterFilterName\r\n                filterFn: undefined, // when defined overrides the filter function that ngTableDefaultGetData uses\r\n                filterLayout: 'stack' // alternative: 'horizontal'\r\n            },\r\n            defaultGroupOptions: IGroupSettings = {\r\n                defaultSort: 'asc', // set to 'asc' or 'desc' to apply sorting to groups\r\n                isExpanded: true\r\n            },\r\n            defaultSettingsFns = getDefaultSettingFns();\r\n\r\n        this.data = [];\r\n\r\n        this.parameters = function (newParameters?: IParamValues<T> | { [name: string]: string }, parseParamsFromUrl?: boolean) {\r\n            parseParamsFromUrl = parseParamsFromUrl || false;\r\n            if (typeof newParameters !== undefined) {\r\n                for (var key in newParameters) {\r\n                    var value = newParameters[key];\r\n                    if (parseParamsFromUrl && key.indexOf('[') >= 0) {\r\n                        var keys = key.split(/\\[(.*)\\]/).reverse()\r\n                        var lastKey = '';\r\n                        for (var i = 0, len = keys.length; i < len; i++) {\r\n                            var name = keys[i];\r\n                            if (name !== '') {\r\n                                var v = value;\r\n                                value = {};\r\n                                value[lastKey = name] = (isNumber(v) ? parseFloat(v) : v);\r\n                            }\r\n                        }\r\n                        if (lastKey === 'sorting') {\r\n                            _params[lastKey] = {};\r\n                        }\r\n                        _params[lastKey] = ng1.extend(_params[lastKey] || {}, value[lastKey]);\r\n                    } else {\r\n                        if (key === 'group') {\r\n                            _params[key] = parseGroup(newParameters[key]);\r\n                        } else {\r\n                            _params[key] = (isNumber(newParameters[key]) ? parseFloat(newParameters[key]) : newParameters[key]);\r\n                        }\r\n                    }\r\n                }\r\n                log('ngTable: set parameters', _params);\r\n                return this;\r\n            }\r\n            return _params;\r\n        };\r\n\r\n        function parseGroup(group: string | Grouping<T>) {\r\n            var defaultSort = _settings.groupOptions && _settings.groupOptions.defaultSort;\r\n            if (!group) {\r\n                return group;\r\n            } else if (isGroupingFun(group)) {\r\n                if (group.sortDirection == null) {\r\n                    group.sortDirection = defaultSort;\r\n                }\r\n                return group;\r\n            } else if (typeof group === 'object') {\r\n                for (var key in group) {\r\n                    if (group[key] == null) {\r\n                        group[key] = defaultSort;\r\n                    }\r\n                }\r\n                return group;\r\n            } else {\r\n                return {\r\n                    [group]: defaultSort\r\n                };\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#settings\r\n         * @description Set new settings for table\r\n         *\r\n         * @param {string} newSettings New settings or undefined\r\n         * @returns {Object} Current settings or `this`\r\n         */\r\n        this.settings = function (newSettings?: ISettings<T>) {\r\n            if (ng1.isDefined(newSettings)) {\r\n\r\n                // todo: don't modify newSettings object: this introduces unexpected side effects;\r\n                // instead take a copy of newSettings\r\n\r\n                if (newSettings.filterOptions) {\r\n                    newSettings.filterOptions = ng1.extend({}, _settings.filterOptions, newSettings.filterOptions);\r\n                }\r\n                if (newSettings.groupOptions) {\r\n                    newSettings.groupOptions = ng1.extend({}, _settings.groupOptions, newSettings.groupOptions);\r\n                }\r\n\r\n                if (ng1.isArray(newSettings.dataset)) {\r\n                    //auto-set the total from passed in dataset\r\n                    newSettings.total = newSettings.dataset.length;\r\n                }\r\n\r\n                var originalDataset = _settings.dataset;\r\n                _settings = ng1.extend(_settings, newSettings);\r\n\r\n                if (ng1.isArray(newSettings.dataset)) {\r\n                    optimizeFilterDelay();\r\n                }\r\n\r\n                // note: using != as want null and undefined to be treated the same\r\n                var hasDatasetChanged = newSettings.hasOwnProperty('dataset') && (newSettings.dataset != originalDataset);\r\n                if (hasDatasetChanged) {\r\n                    if (isCommittedDataset) {\r\n                        this.page(1); // reset page as a new dataset has been supplied\r\n                    }\r\n                    isCommittedDataset = false;\r\n\r\n                    var fireEvent = function () {\r\n                        ngTableEventsChannel.publishDatasetChanged(self, newSettings.dataset, originalDataset);\r\n                    };\r\n\r\n                    if (initialEvents) {\r\n                        initialEvents.push(fireEvent);\r\n                    } else {\r\n                        fireEvent();\r\n                    }\r\n                }\r\n                log('ngTable: set settings', _settings);\r\n                return this;\r\n            }\r\n            return _settings;\r\n        };\r\n\t\t\r\n\t\t// Set translated accessibility options\r\n\t\tthis.setAccessibilityOptions = function() {\r\n\t\t\tif(_settings.translations != null){\r\n\t\t\t\t_params.accessibilityOptions = _settings.translations;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n        this.page = function (page?: number) {\t\t\t\t\t\t\r\n\t\t\tif(page !== undefined){\r\n\t\t\t\tthis.currentPage = page;\r\n\t\t\t}\r\n\t\t\treturn page !== undefined ? this.parameters({\r\n                'page': page\r\n            }) : _params.page;\r\n        };\r\n\r\n        // wrapper for page() function so that focus can be\r\n        // retained on the button that initiated the page change\r\n        this.pageFocus = function (page: number, event: Event) {\r\n           // function can be removed after all references to it are removed and replaced with page()\r\n           // this.pageButtonToRefocus = event.target;\r\n            return this.page(page);\r\n        }\r\n\r\n        this.accessibilityOptions = function (field: string) {\r\n            if (field != null && field !== undefined) {\r\n                return _params.accessibilityOptions[field] ? _params.accessibilityOptions[field] : '';\r\n            }\r\n            return '';\r\n        }\r\n\r\n        this.total = function (total?: number) {\r\n            return total !== undefined ? this.settings({\r\n                'total': total\r\n            }) : _settings.total;\r\n        };\r\n\r\n        this.count = function (count?: number) {\r\n            // reset to first page because can be blank page\r\n            return count !== undefined ? this.parameters({\r\n                'count': count,\r\n                'page': 1\r\n            }) : _params.count;\r\n        };\r\n\r\n        this.filter = function (filter?: IFilterValues | boolean) {\r\n            if (filter != null && typeof filter === 'object') {\r\n                return this.parameters({\r\n                    'filter': filter,\r\n                    'page': 1\r\n                });\r\n            } else if (filter === true) {\r\n                var keys = Object.keys(_params.filter);\r\n                var significantFilter: IFilterValues = {};\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var filterValue = _params.filter[keys[i]];\r\n                    if (filterValue != null && filterValue !== '') {\r\n                        significantFilter[keys[i]] = filterValue;\r\n                    }\r\n                }\r\n                return significantFilter;\r\n            } else {\r\n                return _params.filter;\r\n            }\r\n        };\r\n\r\n        this.group = function (group?: Grouping<T> | string, sortDirection?: string) {\r\n            if (group === undefined) {\r\n                return _params.group;\r\n            }\r\n\r\n            var newParameters: IParamValues<T> = {\r\n                page: 1\r\n            };\r\n            if (isGroupingFun(group) && sortDirection !== undefined) {\r\n                group.sortDirection = sortDirection;\r\n                newParameters.group = group;\r\n            } else if (typeof group === 'string' && sortDirection !== undefined) {\r\n                newParameters.group = { [group]: sortDirection };\r\n            } else {\r\n                newParameters.group = group;\r\n            }\r\n            this.parameters(newParameters);\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#sorting\r\n         * @description If 'sorting' parameter is not set, return current sorting. Otherwise set current sorting.\r\n         *\r\n         * @param {string} sorting New sorting\r\n         * @returns {Object} Current sorting or `this`\r\n         */\r\n        this.sorting = function (sorting?: ISortingValues | string, direction?: string) {\r\n            if (typeof sorting === 'string' && direction !== undefined) {\r\n                this.parameters({\r\n                    'sorting': { [sorting]: direction }\r\n                });\r\n                return this;\r\n            }\r\n            return sorting !== undefined ? this.parameters({\r\n                'sorting': sorting\r\n            }) : _params.sorting;\r\n        };\r\n\r\n        this.isSortBy = function (field: string, direction?: string) {\r\n            if (direction !== undefined) {\r\n                return _params.sorting[field] !== undefined && _params.sorting[field] == direction;\r\n            } else {\r\n                return _params.sorting[field] !== undefined;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#orderBy\r\n         * @description Return object of sorting parameters for angular filter\r\n         *\r\n         * @returns {Array} Array like: [ '-name', '+age' ]\r\n         */\r\n        this.orderBy = function () {\r\n            return convertSortToOrderBy(_params.sorting);\r\n        };\r\n\r\n        function convertSortToOrderBy(sorting: ISortingValues) {\r\n            var result: string[] = [];\r\n            for (var column in sorting) {\r\n                result.push((sorting[column] === \"asc\" ? \"+\" : \"-\") + column);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#generatePagesArray\r\n         * @description Generate array of pages\r\n         *\r\n         * When no arguments supplied, the current parameter state of this `NgTableParams` instance will be used\r\n         *\r\n         * @param {boolean} currentPage which page must be active\r\n         * @param {boolean} totalItems  Total quantity of items\r\n         * @param {boolean} pageSize    Quantity of items on page\r\n         * @param {number} maxBlocks    Quantity of blocks for pagination\r\n         * @returns {Array} Array of pages\r\n         */\r\n        this.generatePagesArray = function (currentPage?: number, totalItems?: number, pageSize?: number, maxBlocks?: number) {\r\n            if (!arguments.length) {\r\n                currentPage = this.page();\r\n                totalItems = this.total();\r\n                pageSize = this.count();\r\n            }\r\n\r\n            var maxPage: number, maxPivotPages: number, minPage: number, numPages: number;\r\n            maxBlocks = maxBlocks && maxBlocks < 6 ? 6 : maxBlocks;\r\n\r\n            var pages: IPageButton[] = [];\r\n            numPages = Math.ceil(totalItems / pageSize);\r\n            if (numPages > 1) {\r\n                pages.push({\r\n                    type: 'prev',\r\n                    number: Math.max(1, currentPage - 1),\r\n                    active: currentPage > 1\r\n                });\r\n                pages.push({\r\n                    type: 'first',\r\n                    number: 1,\r\n                    active: currentPage > 1,\r\n                    current: currentPage === 1\r\n                });\r\n                maxPivotPages = Math.round((_settings.paginationMaxBlocks - _settings.paginationMinBlocks) / 2);\r\n                minPage = Math.max(2, currentPage - maxPivotPages);\r\n                maxPage = Math.min(numPages - 1, currentPage + maxPivotPages * 2 - (currentPage - minPage));\r\n                minPage = Math.max(2, minPage - (maxPivotPages * 2 - (maxPage - minPage)));\r\n                var i = minPage;\r\n                while (i <= maxPage) {\r\n                    if ((i === minPage && i !== 2) || (i === maxPage && i !== numPages - 1)) {\r\n                        pages.push({\r\n                            type: 'more',\r\n                            active: false\r\n                        });\r\n                    } else {\r\n                        pages.push({\r\n                            type: 'page',\r\n                            number: i,\r\n                            active: currentPage !== i,\r\n                            current: currentPage === i\r\n                        });\r\n                    }\r\n                    i++;\r\n                }\r\n                pages.push({\r\n                    type: 'last',\r\n                    number: numPages,\r\n                    active: currentPage !== numPages,\r\n                    current: currentPage === numPages\r\n                });\r\n                pages.push({\r\n                    type: 'next',\r\n                    number: Math.min(numPages, currentPage + 1),\r\n                    active: currentPage < numPages\r\n                });\r\n            }\r\n            return pages;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#isDataReloadRequired\r\n         * @description Return true when a change to this `NgTableParams` instance should require the reload method\r\n         * to be run so as to ensure the data presented to the user reflects the `NgTableParams`\r\n         *\r\n         * Note that this method will return false when the reload method has run but fails. In this case\r\n         * `hasErrorState` will return true.\r\n         */\r\n        this.isDataReloadRequired = function () {\r\n            // note: using != as want to treat null and undefined the same\r\n            return !isCommittedDataset || !ng1.equals(createComparableParams(), prevParamsMemento)\r\n                || hasGlobalSearchFieldChanges();\r\n        };\r\n\r\n        function createComparableParams(): Memento {\r\n            var group = _params.group;\r\n            return {\r\n                params: _params,\r\n                groupSortDirection: isGroupingFun(group) ? group.sortDirection : undefined\r\n            };\r\n        }\r\n        function isGroupingFun(val: string | Grouping<T>): val is IGroupingFunc<T> {\r\n            return typeof val === 'function'\r\n        }\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#hasFilter\r\n         * @description Determines if NgTableParams#filter has significant filter value(s)\r\n         * (any value except null, undefined, or empty string)\r\n         * @returns {Boolean} true when NgTableParams#filter has at least one significant field value\r\n         */\r\n        this.hasFilter = function () {\r\n            return Object.keys(this.filter(true)).length > 0;\r\n        };\r\n\r\n        this.hasGroup = function (group?: IGroupingFunc<T> | string, sortDirection?: string) {\r\n            if (group == null) {\r\n                return isGroupingFun(_params.group) || Object.keys(_params.group).length > 0\r\n            }\r\n\r\n            if (isGroupingFun(group)) {\r\n                if (sortDirection == null) {\r\n                    return _params.group === group;\r\n                } else {\r\n                    return _params.group === group && group.sortDirection === sortDirection;\r\n                }\r\n            } else {\r\n                if (sortDirection == null) {\r\n                    return Object.keys(_params.group).indexOf(group) !== -1;\r\n                } else {\r\n                    return (_params.group as IGroupValues)[group] === sortDirection;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.hasFilterChanges = function () {\r\n            var previousFilter = (prevParamsMemento && prevParamsMemento.params.filter);\r\n            return !ng1.equals((_params.filter), previousFilter) || hasGlobalSearchFieldChanges();\r\n        };\r\n\r\n        function hasGlobalSearchFieldChanges() {\r\n            var currentVal = (_params.filter && _params.filter['$']);\r\n            var previousVal =\r\n                (prevParamsMemento && prevParamsMemento.params.filter && prevParamsMemento.params.filter['$']);\r\n            return !ng1.equals(currentVal, previousVal);\r\n        }\r\n\r\n        this.url = function (asString?: boolean) {\r\n            // this function is an example of Typescript gone bad!!\r\n            asString = asString || false;\r\n            var pairs: any[] | { [name: string]: string } = (asString ? [] : {});\r\n            for (var key in _params) {\r\n                if (_params.hasOwnProperty(key)) {\r\n                    var item = (_params as { [name: string]: any })[key],\r\n                        name = encodeURIComponent(key);\r\n                    if (typeof item === \"object\") {\r\n                        for (var subkey in item) {\r\n                            if (isSignificantValue(item[subkey], key)) {\r\n                                var pname = name + \"[\" + encodeURIComponent(subkey) + \"]\";\r\n                                collectValue(item[subkey], pname);\r\n                            }\r\n                        }\r\n                    } else if (!ng1.isFunction(item) && isSignificantValue(item, key)) {\r\n                        collectValue(item, name);\r\n                    }\r\n                }\r\n            }\r\n            return pairs;\r\n\r\n            function collectValue(value: any, key: string) {\r\n                if (isArray(pairs)) {\r\n                    pairs.push(key + \"=\" + encodeURIComponent(value));\r\n                } else {\r\n                    pairs[key] = encodeURIComponent(value);\r\n                }\r\n            }\r\n\r\n            function isArray(pairs: any[] | {}): pairs is Array<any> {\r\n                return asString;\r\n            }\r\n\r\n            function isSignificantValue(value: any, key: string) {\r\n                return key === \"group\" ? true : typeof value !== undefined && value !== \"\";\r\n            }\r\n        };\r\n\r\n        this.reload = function () {\r\n            var self: INgTableParams<T> = this,\r\n                pData: ng1.IPromise<any> = null;\r\n\r\n            _settings.$loading = true;\r\n\r\n            prevParamsMemento = ng1.copy(createComparableParams());\r\n            isCommittedDataset = true;\r\n\r\n            if (self.hasGroup()) {\r\n                pData = runInterceptorPipeline($q.when(_settings.getGroups(self)));\r\n            } else {\r\n                const fn = _settings.getData as IGetDataFunc<T>;\r\n                pData = runInterceptorPipeline($q.when(fn(self)));\r\n            }\r\n\r\n            log('ngTable: reload data');\r\n\r\n            var oldData = self.data;\r\n            return pData.then(function (data) {\r\n                _settings.$loading = false;\r\n                errParamsMemento = null;\r\n\r\n                self.data = data;\r\n                // note: I think it makes sense to publish this event even when data === oldData\r\n                // subscribers can always set a filter to only receive the event when data !== oldData\r\n                ngTableEventsChannel.publishAfterReloadData(self, data, oldData);\r\n                self.reloadPages();\r\n\r\n                return data;\r\n            }).catch(function (reason) {\r\n                errParamsMemento = prevParamsMemento;\r\n                // \"rethrow\"\r\n                return $q.reject(reason);\r\n            });\r\n        };\r\n\r\n        this.hasErrorState = function () {\r\n            return !!(errParamsMemento && ng1.equals(errParamsMemento, createComparableParams()));\r\n        };\r\n\r\n        function optimizeFilterDelay() {\r\n            // don't debounce by default filter input when working with small synchronous datasets\r\n            if (_settings.filterOptions.filterDelay === defaultFilterOptions.filterDelay &&\r\n                _settings.total <= _settings.filterOptions.filterDelayThreshold &&\r\n                _settings.getData === defaultSettingsFns.getData) {\r\n                _settings.filterOptions.filterDelay = 0;\r\n            }\r\n        }\r\n\r\n        this.reloadPages = (function () {\r\n            var currentPages: IPageButton[];\r\n            return function () {\r\n                var oldPages = currentPages;\r\n                var newPages = self.generatePagesArray(self.page(), self.total(), self.count());\r\n                if (!ng1.equals(oldPages, newPages)) {\r\n                    currentPages = newPages;\r\n                    ngTableEventsChannel.publishPagesChanged(this, newPages, oldPages);\r\n                }\r\n            }\r\n        })();\r\n\r\n        function runInterceptorPipeline(fetchedData: ng1.IPromise<any>) {\r\n            var interceptors = _settings.interceptors || [];\r\n\r\n            return interceptors.reduce(function (result, interceptor) {\r\n                var thenFn = (interceptor.response && interceptor.response.bind(interceptor)) || $q.when;\r\n                var rejectFn = (interceptor.responseError && interceptor.responseError.bind(interceptor)) || $q.reject;\r\n                return result.then(function (data) {\r\n                    return thenFn(data, self);\r\n                }, function (reason) {\r\n                    return rejectFn(reason, self);\r\n                });\r\n            }, fetchedData);\r\n        }\r\n\r\n        function getDefaultSettingFns() {\r\n\r\n            return {\r\n                getData: getData,\r\n                getGroups: getGroups\r\n            };\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @name settings#getData\r\n             * @description Returns the data to display in the table\r\n             *\r\n             * Called by `NgTableParams` whenever it considers new data is to be loaded\r\n             *\r\n             * @param {Object} params the `NgTableParams` requesting data\r\n             */\r\n            function getData(params: INgTableParams<T>) {\r\n                return ngTableDefaultGetData(params.settings().dataset, params);\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @name settings#getGroups\r\n             * @description Return groups of data to display in the table\r\n             *\r\n             * Called by `NgTableParams` whenever it considers new data is to be loaded\r\n             * and when a `group` value has been assigned\r\n             *\r\n             * @param {Object} params the `NgTableParams` requesting data\r\n             */\r\n            function getGroups(params: INgTableParams<T>) {\r\n\r\n                var group = params.group();\r\n                var groupFn: IGroupingFunc<T>;\r\n                var sortDirection: string = undefined;\r\n                if (isGroupingFun(group)) {\r\n                    groupFn = group;\r\n                    sortDirection = group.sortDirection;\r\n                } else {\r\n                    // currently support for only one group implemented\r\n                    var groupField = Object.keys(group)[0];\r\n                    sortDirection = group[groupField];\r\n                    groupFn = function (item) {\r\n                        return getPath(item, groupField);\r\n                    };\r\n                }\r\n\r\n                var settings = params.settings();\r\n                var originalDataOptions = settings.dataOptions;\r\n                settings.dataOptions = { applyPaging: false };\r\n                const getData: IGetDataFunc<T> = settings.getData;\r\n                var gotData = $q.when(getData(params));\r\n                return gotData.then(function (data) {\r\n                    var groups: { [name: string]: IDataRowGroup<T> } = {};\r\n                    ng1.forEach(data, function (item) {\r\n                        var groupName = groupFn(item);\r\n                        groups[groupName] = groups[groupName] || {\r\n                            data: [],\r\n                            $hideRows: !settings.groupOptions.isExpanded,\r\n                            value: groupName\r\n                        };\r\n                        groups[groupName].data.push(item);\r\n                    });\r\n                    var result: IDataRowGroup<T>[] = [];\r\n                    for (var i in groups) {\r\n                        result.push(groups[i]);\r\n                    }\r\n                    if (sortDirection) {\r\n                        var orderByFn = ngTableDefaultGetData.getOrderByFn();\r\n                        var orderBy = convertSortToOrderBy({\r\n                            value: sortDirection\r\n                        });\r\n                        result = orderByFn(result, orderBy);\r\n                    }\r\n\r\n                    return ngTableDefaultGetData.applyPaging(result, params);\r\n                }).finally(function () {\r\n                    // restore the real options\r\n                    settings.dataOptions = originalDataOptions;\r\n                });\r\n            }\r\n\r\n            function getPath(obj: { [name: string]: any }, ks: string | string[]): any {\r\n                // origianl source https://github.com/documentcloud/underscore-contrib\r\n\r\n                let keys: string[];\r\n                if (typeof ks === \"string\") {\r\n                    keys = ks.split(\".\");\r\n                } else {\r\n                    keys = ks;\r\n                }\r\n\r\n                // If we have reached an undefined property\r\n                // then stop executing and return undefined\r\n                if (obj === undefined) return void 0;\r\n\r\n                // If the path array has no more elements, we've reached\r\n                // the intended property and return its value\r\n                if (keys.length === 0) return obj;\r\n\r\n                // If we still have elements in the path array and the current\r\n                // value is null, stop executing and return undefined\r\n                if (obj === null) return void 0;\r\n\r\n                return getPath(obj[keys[0]], keys.slice(1));\r\n            }\r\n        }\r\n\r\n        var _params: IParamValues<T> = {\r\n            page: 1,\r\n            count: 10,\r\n            filter: {},\r\n            sorting: {},\r\n            group: {},\r\n            accessibilityOptions: {\r\n                pagerTitle: 'Pagination',\r\n                current: 'Current Page', // default values\r\n                more: 'More Pages', // default values\r\n                next: 'Next Page', // default values \r\n                prev: 'Previous Page', // default values\r\n                pageNumPrefix: 'Page'\r\n            }\r\n        };\r\n        ng1.extend(_params, ngTableDefaults.params);\r\n\r\n        /**\r\n         * @ngdoc object\r\n         * @name settings\r\n         * @module ngTable\r\n         * @description configuration settings for `NgTableParams`\r\n         */\r\n        var _settings: ISettings<T> = {\r\n            $loading: false,\r\n            dataset: null, //allows data to be set when table is initialized\r\n\t\t\ttranslations: null,\r\n            total: 0,\r\n            defaultSort: 'desc',\r\n            filterOptions: ng1.copy(defaultFilterOptions),\r\n            groupOptions: ng1.copy(defaultGroupOptions),\r\n            counts: [10, 25, 50, 100],\r\n            interceptors: [],\r\n            paginationMaxBlocks: 11,\r\n            paginationMinBlocks: 5,\r\n            sortingIndicator: 'span'\r\n        };\r\n\r\n        this.settings(defaultSettingsFns);\r\n        this.settings(ngTableDefaults.settings);\r\n        this.settings(baseSettings);\r\n        this.parameters(baseParameters, true);\r\n\t\tthis.setAccessibilityOptions();\r\n\r\n        ngTableEventsChannel.publishAfterCreated(this);\r\n        // run events during construction after the initial create event. That way a consumer\r\n        // can subscribe to all events for a table without \"dropping\" an event\r\n        ng1.forEach(initialEvents, function (event) {\r\n            event();\r\n        });\r\n        initialEvents = null;\r\n\r\n        return this;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/ngTableParams.ts","var path = 'ng-table/filterRow.html';\nvar html = \"<tr ng-show=show_filter class=ng-table-filters> <th scope=col data-title-text=\\\"{{$column.titleAlt(this) || $column.title(this)}}\\\" ng-repeat=\\\"$column in $columns\\\" ng-if=$column.show(this) class=\\\"filter {{$column.class(this)}}\\\" ng-class=\\\"params.settings().filterOptions.filterLayout === 'horizontal' ? 'filter-horizontal' : ''\\\"> <div ng-repeat=\\\"(name, filter) in $column.filter(this)\\\" ng-include=config.getTemplateUrl(filter) class=filter-cell ng-class=\\\"[getFilterCellCss($column.filter(this), params.settings().filterOptions.filterLayout), $last ? 'last' : '']\\\"> </div> </th> </tr> \";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/filterRow.html\n// module id = 24\n// module chunks = 0","var path = 'ng-table/filters/number.html';\nvar html = \"<input type=number name={{name}} ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"input-filter form-control\\\" placeholder=\\\"{{getFilterPlaceholderValue(filter, name)}}\\\"/> \";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/filters/number.html\n// module id = 25\n// module chunks = 0","var path = 'ng-table/filters/select-multiple.html';\nvar html = \"<select ng-options=\\\"data.id as data.title for data in $column.data\\\" ng-disabled=$filterRow.disabled multiple=multiple ng-multiple=true ng-model=params.filter()[name] class=\\\"filter filter-select-multiple form-control\\\" name={{name}}> </select> \";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/filters/select-multiple.html\n// module id = 26\n// module chunks = 0","var path = 'ng-table/filters/select.html';\nvar html = \"<select ng-options=\\\"data.id as data.title for data in $selectData\\\" ng-table-select-filter-ds=$column ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"filter filter-select form-control\\\" name={{name}}> <option style=display:none value=\\\"\\\"></option> </select> \";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/filters/select.html\n// module id = 27\n// module chunks = 0","var path = 'ng-table/filters/text.html';\nvar html = \"<input type=text name={{name}} ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"input-filter form-control\\\" placeholder=\\\"{{getFilterPlaceholderValue(filter, name)}}\\\"/> \";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/filters/text.html\n// module id = 28\n// module chunks = 0","var path = 'ng-table/groupRow.html';\nvar html = \"<tr ng-if=params.hasGroup() ng-show=$groupRow.show class=ng-table-group-header> <th colspan={{getVisibleColumns().length}} class=sortable ng-class=\\\"{\\r\\n                    'sort-asc': params.hasGroup($selGroup, 'asc'),\\r\\n                    'sort-desc':params.hasGroup($selGroup, 'desc')\\r\\n                  }\\\"> <a href=\\\"\\\" ng-click=\\\"isSelectorOpen = !isSelectorOpen\\\" class=ng-table-group-selector> <strong class=sort-indicator>{{$selGroupTitle}}</strong> <button class=\\\"btn btn-default btn-xs ng-table-group-close\\\" ng-click=\\\"$groupRow.show = false; $event.preventDefault(); $event.stopPropagation();\\\"> <span class=\\\"glyphicon glyphicon-remove\\\"></span> </button> <button class=\\\"btn btn-default btn-xs ng-table-group-toggle\\\" ng-click=\\\"toggleDetail(); $event.preventDefault(); $event.stopPropagation();\\\"> <span class=glyphicon ng-class=\\\"{\\r\\n                    'glyphicon-resize-small': params.settings().groupOptions.isExpanded,\\r\\n                    'glyphicon-resize-full': !params.settings().groupOptions.isExpanded\\r\\n                }\\\"></span> </button> </a> <div class=list-group ng-if=isSelectorOpen> <a href=\\\"\\\" class=list-group-item ng-repeat=\\\"group in getGroupables()\\\" ng-click=groupBy(group)> <strong>{{ getGroupTitle(group)}}</strong> <strong ng-class=\\\"isSelectedGroup(group) && 'sort-indicator'\\\"></strong> </a> </div> </th> </tr> \";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/groupRow.html\n// module id = 29\n// module chunks = 0","var path = 'ng-table/header.html';\nvar html = \"<ng-table-group-row></ng-table-group-row> <ng-table-sorter-row></ng-table-sorter-row> <ng-table-filter-row></ng-table-filter-row> \";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/header.html\n// module id = 30\n// module chunks = 0","var path = 'ng-table/pager.html';\nvar html = \"<nav class=\\\"ng-cloak ng-table-pager\\\" ng-if=params.data.length aria-label=\\\"{{params.accessibilityOptions('pagerTitle')}}\\\"> <div ng-if=\\\" params.settings().counts.length \\\" class=\\\"ng-table-counts btn-group pull-right count-section\\\"> <button ng-repeat=\\\"count in params.settings().counts\\\" type=\\\"button \\\" ng-class=\\\"{ 'active':params.count()==count} \\\" ng-click=\\\"params.count(count) \\\" class=\\\"btn btn-default\\\"> <span ng-bind=\\\"count \\\"></span> </button> </div> <ul ng-if=pages.length class=\\\"pagination ng-table-pagination\\\"> <li ng-class=\\\"{ 'disabled': !page.active && !page.current, 'active': page.current}\\\" ng-repeat=\\\"page in pages\\\" ng-switch=page.type> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_prev ng-switch-when=prev ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_prev'\\\" aria-label=\\\"{{params.accessibilityOptions('prev')}}\\\" ng-disabled=\\\"{{ !page.active && !page.current ? true : undefined }}\\\"><i class=\\\"fa fa-angle-left\\\"></i></button> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_{{page.number}} ng-attr-aria-current=\\\"{{page.current ? 'page' : undefined}}\\\" ng-switch-when=first ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_' + page.number \\\" ng-disabled=\\\"{{ page.current ? true : undefined }}\\\" aria-label=\\\"{{params.accessibilityOptions('pageNumPrefix')}} {{page.number}}\\\" ng-disabled=\\\"{{ !page.active && !page.current ? true : undefined }}\\\">{{page.number}}</button> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_{{page.number}} ng-attr-aria-current=\\\"{{page.current ? 'page' : undefined}}\\\" ng-switch-when=page ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_' + page.number \\\" ng-disabled=\\\"{{ page.current ? true : undefined }}\\\" aria-label=\\\"{{params.accessibilityOptions('pageNumPrefix')}} {{page.number}}\\\">{{page.number}}</button> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_more ng-switch-when=more ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_more' \\\" aria-label=\\\"{{params.accessibilityOptions('more')}}\\\"><i class=\\\"fa fa-ellipsis-h\\\"></i></button> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_{{page.number}} ng-attr-aria-current=\\\"{{page.current ? 'page' : undefined}}\\\" ng-switch-when=last ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_' + page.number \\\" ng-disabled=\\\"{{ page.current ? true : undefined }}\\\" aria-label=\\\"{{params.accessibilityOptions('pageNumPrefix')}} {{page.number}}\\\">{{page.number}}</button> <button trigger-focus-on=\\\"{{ params.focusElement }}\\\" id=page_next ng-switch-when=next ng-click=\\\"params.page(page.number, $event); params.focusElement = 'page_next' \\\" aria-label=\\\"{{params.accessibilityOptions('next')}}\\\" ng-disabled=\\\"{{ !page.active && !page.current ? true : undefined }}\\\"><i class=\\\"fa fa-angle-right\\\"></i></button> </li> </ul> </nav> <span class=sr-only aria-live=assertive aria-hidden=true>{{ params.currentPage != '' ? params.accessibilityOptions('pageNumPrefix') + ' ' + params.currentPage : '' }}</span>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/pager.html\n// module id = 31\n// module chunks = 0","var path = 'ng-table/sorterRow.html';\nvar html = \"<tr class=ng-table-sort-header role=row> <th scope=col title={{$column.headerTitle(this)}} role=columnheader ng-attr-aria-sort=\\\"{{!$column.sortable(this) ? undefined : params.sorting()[$column.sortable(this)]=='asc' ? 'ascending' : params.sorting()[$column.sortable(this)]=='desc' ? 'descending' : 'none'}}\\\" ng-repeat=\\\"$column in $columns\\\" ng-class=\\\"{ \\r\\n                    'sortable': $column.sortable(this),\\r\\n                    'sort-asc': params.sorting()[$column.sortable(this)]=='asc',\\r\\n                    'sort-desc': params.sorting()[$column.sortable(this)]=='desc'\\r\\n                  }\\\" ng-init=\\\"template = $column.headerTemplateURL(this)\\\" class=\\\"header {{$column.class(this)}}\\\" ng-if=$column.show(this)> <a role=button id=id_{{$index}} aria-describedby=sortDescription tabindex=0 ng-if=\\\"$column.sortable(this) && (template || $column.title(this))\\\" ng-click=\\\"sortBy($column, $event)\\\" ng-keydown=\\\"(($event.key === 'Enter' || $event.key === ' ') && sortBy($column, $event)) || ($event.keyCode == 9 && resetSortDesc($column))\\\" class=sort-button> <div ng-if=!template class=ng-table-header ng-class=\\\"{'sort-indicator': params.settings().sortingIndicator == 'div'}\\\"> <span ng-bind=$column.title(this) ng-class=\\\"{'sort-indicator': params.settings().sortingIndicator == 'span'}\\\">{{$column.title(this)}}</span> <i ng-if=\\\"(params.settings().sortingIndicator == 'div' || params.settings().sortingIndicator == 'span')\\\" class=\\\"fa fa-sort\\\" ng-class=\\\"{'fa-sort-up':params.sorting()[$column.sortable(this)]=='asc','fa-sort-down': params.sorting()[$column.sortable(this)]=='desc'}\\\" aria-hidden=true></i> <span class=sortDescription aria-hidden=false aria-live=polite ng-bind=sortDesc[$column.sortable(this)]></span> </div> <div ng-if=template ng-include=template></div> </a> <div ng-if=\\\"!$column.sortable(this) && (template || $column.title(this))\\\"> <div ng-if=!template class=ng-table-header> <span ng-bind=$column.title(this)></span> </div> <div ng-if=template ng-include=template></div> </div> </th> </tr>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/sorterRow.html\n// module id = 32\n// module chunks = 0","import * as ng1 from 'angular';\r\nimport coreModule from './src/core';\r\nimport browserModule from './src/browser';\r\n\r\nconst ngTable = ng1.module('ngTable', [coreModule.name, browserModule.name]);\r\n\r\nexport { ngTable };\r\nexport * from './src/core';\r\nexport * from './src/browser';\n\n\n// WEBPACK FOOTER //\n// ./index.ts"],"sourceRoot":""}